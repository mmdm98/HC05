
HC05_TimeTraveler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003204  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003310  08003310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003414  08003414  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003414  08003414  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003414  08003414  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800341c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000070  0800348c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  0800348c  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007440  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9a  00000000  00000000  000274d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00028f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  00029800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172c5  00000000  00000000  00029fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094b4  00000000  00000000  00041295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008395c  00000000  00000000  0004a749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce0a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002560  00000000  00000000  000ce0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080032f8 	.word	0x080032f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080032f8 	.word	0x080032f8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b0b8      	sub	sp, #224	; 0xe0
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb4f 	bl	8000804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8b9 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f9eb 	bl	8000544 <MX_GPIO_Init>
  MX_RTC_Init();//hay que ponerlo afuera del main ?NO.
 800016e:	f000 f913 	bl	8000398 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f96b 	bl	800044c <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char data_in[1];
  char msg0[]="\nHC-05 Bluetooth with STM32\n";
 8000176:	4b52      	ldr	r3, [pc, #328]	; (80002c0 <main+0x164>)
 8000178:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800017c:	461d      	mov	r5, r3
 800017e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000182:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000186:	c407      	stmia	r4!, {r0, r1, r2}
 8000188:	7023      	strb	r3, [r4, #0]
  char msg1[]="\nHola, la temperatura es: 27Â°C\n";
 800018a:	4b4e      	ldr	r3, [pc, #312]	; (80002c4 <main+0x168>)
 800018c:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8000190:	461d      	mov	r5, r3
 8000192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019a:	682b      	ldr	r3, [r5, #0]
 800019c:	7023      	strb	r3, [r4, #0]
  char msg2[]="\nAT-COMMANDS\n";
 800019e:	4b4a      	ldr	r3, [pc, #296]	; (80002c8 <main+0x16c>)
 80001a0:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80001a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001a6:	c407      	stmia	r4!, {r0, r1, r2}
 80001a8:	8023      	strh	r3, [r4, #0]
  int32_t before = RTC_BKP_DR1;
 80001aa:	2301      	movs	r3, #1
 80001ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  int32_t after = 0;
 80001b0:	2300      	movs	r3, #0
 80001b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  int counterA=0;
 80001b6:	2300      	movs	r3, #0
 80001b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  int counterB=0;
 80001bc:	2300      	movs	r3, #0
 80001be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  char tramaA[60];
  char tramaB[60];
   //serapp
  HAL_UART_Transmit(&huart2, (uint8_t*) msg0, strlen(msg0), HAL_MAX_DELAY);
 80001c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80001c6:	4618      	mov	r0, r3
 80001c8:	f7ff ffc0 	bl	800014c <strlen>
 80001cc:	4603      	mov	r3, r0
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80001d4:	f04f 33ff 	mov.w	r3, #4294967295
 80001d8:	483c      	ldr	r0, [pc, #240]	; (80002cc <main+0x170>)
 80001da:	f002 f9c6 	bl	800256a <HAL_UART_Transmit>
  while (1)
  {
     /* USER CODE END WHILE */
 	  HAL_UART_Receive(&huart2, (uint8_t*)data_in, 1, HAL_MAX_DELAY);
 80001de:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80001e2:	f04f 33ff 	mov.w	r3, #4294967295
 80001e6:	2201      	movs	r2, #1
 80001e8:	4838      	ldr	r0, [pc, #224]	; (80002cc <main+0x170>)
 80001ea:	f002 fa50 	bl	800268e <HAL_UART_Receive>
 	  //hacerlo pero con interrupts cosa que el counter
	  //cuente bien y no espere a recibir algo para actuar
 	  if(RTC_BKP_DR1 == before){
 80001ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d105      	bne.n	8000202 <main+0xa6>
 		  counterA++;
 80001f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80001fa:	3301      	adds	r3, #1
 80001fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000200:	e004      	b.n	800020c <main+0xb0>
 	  }else{
 		  counterB++;
 8000202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000206:	3301      	adds	r3, #1
 8000208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 	  }
 	  before=RTC_BKP_DR1;
 800020c:	2301      	movs	r3, #1
 800020e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

 	  if(data_in[0]=='1'){//hora
 8000212:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8000216:	2b31      	cmp	r3, #49	; 0x31
 8000218:	d108      	bne.n	800022c <main+0xd0>
 		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000220:	482b      	ldr	r0, [pc, #172]	; (80002d0 <main+0x174>)
 8000222:	f000 fdb9 	bl	8000d98 <HAL_GPIO_WritePin>
 		  //HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 		  get_time();
 8000226:	f000 f93b 	bl	80004a0 <get_time>
 800022a:	e7d8      	b.n	80001de <main+0x82>
 	  } else if (data_in[0]=='2'){//temperatura
 800022c:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8000230:	2b32      	cmp	r3, #50	; 0x32
 8000232:	d132      	bne.n	800029a <main+0x13e>
 		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023a:	4825      	ldr	r0, [pc, #148]	; (80002d0 <main+0x174>)
 800023c:	f000 fdac 	bl	8000d98 <HAL_GPIO_WritePin>
 		  sprintf(tramaA, "%hu A\n", counterA);
 8000240:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000244:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000248:	4922      	ldr	r1, [pc, #136]	; (80002d4 <main+0x178>)
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fbcc 	bl	80029e8 <siprintf>
 		  sprintf(tramaB, "%hu B\n", counterB);
 8000250:	463b      	mov	r3, r7
 8000252:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000256:	4920      	ldr	r1, [pc, #128]	; (80002d8 <main+0x17c>)
 8000258:	4618      	mov	r0, r3
 800025a:	f002 fbc5 	bl	80029e8 <siprintf>
 		  strcat(tramaA,tramaB);
 800025e:	463a      	mov	r2, r7
 8000260:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000264:	4611      	mov	r1, r2
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fbde 	bl	8002a28 <strcat>
 		  strcat(msg1,tramaA);
 800026c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000270:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000274:	4611      	mov	r1, r2
 8000276:	4618      	mov	r0, r3
 8000278:	f002 fbd6 	bl	8002a28 <strcat>
 		  HAL_UART_Transmit(&huart2, (uint8_t*) msg1, strlen(msg1), HAL_MAX_DELAY);
 800027c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff63 	bl	800014c <strlen>
 8000286:	4603      	mov	r3, r0
 8000288:	b29a      	uxth	r2, r3
 800028a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800028e:	f04f 33ff 	mov.w	r3, #4294967295
 8000292:	480e      	ldr	r0, [pc, #56]	; (80002cc <main+0x170>)
 8000294:	f002 f969 	bl	800256a <HAL_UART_Transmit>
 8000298:	e7a1      	b.n	80001de <main+0x82>
 	  }
 	  else if (data_in[0]=='3') {//at
 800029a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800029e:	2b33      	cmp	r3, #51	; 0x33
 80002a0:	d19d      	bne.n	80001de <main+0x82>
 		 HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 80002a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ff50 	bl	800014c <strlen>
 80002ac:	4603      	mov	r3, r0
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80002b4:	f04f 33ff 	mov.w	r3, #4294967295
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <main+0x170>)
 80002ba:	f002 f956 	bl	800256a <HAL_UART_Transmit>
 	  HAL_UART_Receive(&huart2, (uint8_t*)data_in, 1, HAL_MAX_DELAY);
 80002be:	e78e      	b.n	80001de <main+0x82>
 80002c0:	08003320 	.word	0x08003320
 80002c4:	08003340 	.word	0x08003340
 80002c8:	08003364 	.word	0x08003364
 80002cc:	200000a0 	.word	0x200000a0
 80002d0:	40010800 	.word	0x40010800
 80002d4:	08003310 	.word	0x08003310
 80002d8:	08003318 	.word	0x08003318

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b094      	sub	sp, #80	; 0x50
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e6:	2228      	movs	r2, #40	; 0x28
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 fb74 	bl	80029d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	f107 0314 	add.w	r3, r7, #20
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800030c:	2309      	movs	r3, #9
 800030e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000314:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800031e:	2301      	movs	r3, #1
 8000320:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000322:	2302      	movs	r3, #2
 8000324:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800032c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000330:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000336:	4618      	mov	r0, r3
 8000338:	f000 fd52 	bl	8000de0 <HAL_RCC_OscConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000342:	f000 f93f 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000346:	230f      	movs	r3, #15
 8000348:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034a:	2302      	movs	r3, #2
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000356:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	2102      	movs	r1, #2
 8000362:	4618      	mov	r0, r3
 8000364:	f000 ffbe 	bl	80012e4 <HAL_RCC_ClockConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800036e:	f000 f929 	bl	80005c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000372:	2301      	movs	r3, #1
 8000374:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800037a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4618      	mov	r0, r3
 8000380:	f001 f948 	bl	8001614 <HAL_RCCEx_PeriphCLKConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800038a:	f000 f91b 	bl	80005c4 <Error_Handler>
  }
}
 800038e:	bf00      	nop
 8000390:	3750      	adds	r7, #80	; 0x50
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void) //si la uso esta setea el time y un par de cosas mÃ¡s
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2100      	movs	r1, #0
 80003a2:	460a      	mov	r2, r1
 80003a4:	801a      	strh	r2, [r3, #0]
 80003a6:	460a      	mov	r2, r1
 80003a8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80003aa:	2300      	movs	r3, #0
 80003ac:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003ae:	4b25      	ldr	r3, [pc, #148]	; (8000444 <MX_RTC_Init+0xac>)
 80003b0:	4a25      	ldr	r2, [pc, #148]	; (8000448 <MX_RTC_Init+0xb0>)
 80003b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80003b4:	4b23      	ldr	r3, [pc, #140]	; (8000444 <MX_RTC_Init+0xac>)
 80003b6:	f04f 32ff 	mov.w	r2, #4294967295
 80003ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80003bc:	4b21      	ldr	r3, [pc, #132]	; (8000444 <MX_RTC_Init+0xac>)
 80003be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003c2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003c4:	481f      	ldr	r0, [pc, #124]	; (8000444 <MX_RTC_Init+0xac>)
 80003c6:	f001 fa9b 	bl	8001900 <HAL_RTC_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80003d0:	f000 f8f8 	bl	80005c4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */ //no se si va asÃ­, si va asÃ­
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0x32F2) {
 80003d4:	2101      	movs	r1, #1
 80003d6:	481b      	ldr	r0, [pc, #108]	; (8000444 <MX_RTC_Init+0xac>)
 80003d8:	f002 f85e 	bl	8002498 <HAL_RTCEx_BKUPRead>
 80003dc:	4603      	mov	r3, r0
 80003de:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d02a      	beq.n	800043c <MX_RTC_Init+0xa4>
  //la hora. Esto para saber cuanto tarda en guardar.
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2201      	movs	r2, #1
 80003f6:	4619      	mov	r1, r3
 80003f8:	4812      	ldr	r0, [pc, #72]	; (8000444 <MX_RTC_Init+0xac>)
 80003fa:	f001 fb17 	bl	8001a2c <HAL_RTC_SetTime>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_RTC_Init+0x70>
  {
    Error_Handler();
 8000404:	f000 f8de 	bl	80005c4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000408:	2301      	movs	r3, #1
 800040a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 800040c:	2311      	movs	r3, #17
 800040e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x14;
 8000410:	2314      	movs	r3, #20
 8000412:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x22;
 8000414:	2322      	movs	r3, #34	; 0x22
 8000416:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000418:	463b      	mov	r3, r7
 800041a:	2201      	movs	r2, #1
 800041c:	4619      	mov	r1, r3
 800041e:	4809      	ldr	r0, [pc, #36]	; (8000444 <MX_RTC_Init+0xac>)
 8000420:	f001 fc74 	bl	8001d0c <HAL_RTC_SetDate>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_RTC_Init+0x96>
  {
    Error_Handler();
 800042a:	f000 f8cb 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 800042e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000432:	2101      	movs	r1, #1
 8000434:	4803      	ldr	r0, [pc, #12]	; (8000444 <MX_RTC_Init+0xac>)
 8000436:	f002 f815 	bl	8002464 <HAL_RTCEx_BKUPWrite>
 800043a:	e000      	b.n	800043e <MX_RTC_Init+0xa6>
	  	return;
 800043c:	bf00      	nop
  /* USER CODE END RTC_Init 2 */

}
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	2000008c 	.word	0x2000008c
 8000448:	40002800 	.word	0x40002800

0800044c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000452:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_USART2_UART_Init+0x50>)
 8000454:	601a      	str	r2, [r3, #0]
  //huart2.Init.BaudRate = 38400;
  huart2.Init.BaudRate = 9600;
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000458:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800045c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_USART2_UART_Init+0x4c>)
 8000484:	f002 f824 	bl	80024d0 <HAL_UART_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800048e:	f000 f899 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000a0 	.word	0x200000a0
 800049c:	40004400 	.word	0x40004400

080004a0 <get_time>:
  }
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
}

void get_time(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	; 0x28
 80004a4:	af02      	add	r7, sp, #8
 char timer[9];
 char date[12];
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80004a6:	463b      	mov	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	4619      	mov	r1, r3
 80004ac:	4821      	ldr	r0, [pc, #132]	; (8000534 <get_time+0x94>)
 80004ae:	f001 fb55 	bl	8001b5c <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	4619      	mov	r1, r3
 80004b8:	481e      	ldr	r0, [pc, #120]	; (8000534 <get_time+0x94>)
 80004ba:	f001 fcdd 	bl	8001e78 <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf(timer,"%02d:%02d:%02d\n",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80004be:	783b      	ldrb	r3, [r7, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	787b      	ldrb	r3, [r7, #1]
 80004c4:	4619      	mov	r1, r3
 80004c6:	78bb      	ldrb	r3, [r7, #2]
 80004c8:	f107 0014 	add.w	r0, r7, #20
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	460b      	mov	r3, r1
 80004d0:	4919      	ldr	r1, [pc, #100]	; (8000538 <get_time+0x98>)
 80004d2:	f002 fa89 	bl	80029e8 <siprintf>
 HAL_UART_Transmit(&huart2, (uint8_t*) timer, strlen(timer), HAL_MAX_DELAY);
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff fe36 	bl	800014c <strlen>
 80004e0:	4603      	mov	r3, r0
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	f107 0114 	add.w	r1, r7, #20
 80004e8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ec:	4813      	ldr	r0, [pc, #76]	; (800053c <get_time+0x9c>)
 80004ee:	f002 f83c 	bl	800256a <HAL_UART_Transmit>
/* Display date Format: dd-mm-yy */
 sprintf(date,"%02d-%02d-%2d\n",gDate.Date, gDate.Month, 2000 + gDate.Year);
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	461a      	mov	r2, r3
 80004f6:	797b      	ldrb	r3, [r7, #5]
 80004f8:	4619      	mov	r1, r3
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000500:	f107 0008 	add.w	r0, r7, #8
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	460b      	mov	r3, r1
 8000508:	490d      	ldr	r1, [pc, #52]	; (8000540 <get_time+0xa0>)
 800050a:	f002 fa6d 	bl	80029e8 <siprintf>
 HAL_UART_Transmit(&huart2, (uint8_t*) date, strlen(date), HAL_MAX_DELAY);
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fe1a 	bl	800014c <strlen>
 8000518:	4603      	mov	r3, r0
 800051a:	b29a      	uxth	r2, r3
 800051c:	f107 0108 	add.w	r1, r7, #8
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <get_time+0x9c>)
 8000526:	f002 f820 	bl	800256a <HAL_UART_Transmit>
}
 800052a:	bf00      	nop
 800052c:	3720      	adds	r7, #32
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000008c 	.word	0x2000008c
 8000538:	08003388 	.word	0x08003388
 800053c:	200000a0 	.word	0x200000a0
 8000540:	08003398 	.word	0x08003398

08000544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <MX_GPIO_Init+0x78>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a17      	ldr	r2, [pc, #92]	; (80005bc <MX_GPIO_Init+0x78>)
 800055e:	f043 0320 	orr.w	r3, r3, #32
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_GPIO_Init+0x78>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0320 	and.w	r3, r3, #32
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_GPIO_Init+0x78>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a11      	ldr	r2, [pc, #68]	; (80005bc <MX_GPIO_Init+0x78>)
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_GPIO_Init+0x78>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0304 	and.w	r3, r3, #4
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800058e:	480c      	ldr	r0, [pc, #48]	; (80005c0 <MX_GPIO_Init+0x7c>)
 8000590:	f000 fc02 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000594:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000598:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2302      	movs	r3, #2
 80005a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	4619      	mov	r1, r3
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_GPIO_Init+0x7c>)
 80005ae:	f000 fa6f 	bl	8000a90 <HAL_GPIO_Init>

}
 80005b2:	bf00      	nop
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010800 	.word	0x40010800

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_MspInit+0x40>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <HAL_MspInit+0x40>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_MspInit+0x40>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_MspInit+0x40>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_MspInit+0x40>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_MspInit+0x40>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <HAL_RTC_MspInit+0x3c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d110      	bne.n	8000648 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000626:	f000 fbcf 	bl	8000dc8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_RTC_MspInit+0x40>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a09      	ldr	r2, [pc, #36]	; (8000654 <HAL_RTC_MspInit+0x40>)
 8000630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <HAL_RTC_MspInit+0x40>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_RTC_MspInit+0x44>)
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40002800 	.word	0x40002800
 8000654:	40021000 	.word	0x40021000
 8000658:	4242043c 	.word	0x4242043c

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <HAL_UART_MspInit+0x88>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d12f      	bne.n	80006dc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <HAL_UART_MspInit+0x8c>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <HAL_UART_MspInit+0x8c>)
 8000682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000686:	61d3      	str	r3, [r2, #28]
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <HAL_UART_MspInit+0x8c>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_UART_MspInit+0x8c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <HAL_UART_MspInit+0x8c>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_UART_MspInit+0x8c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ac:	2304      	movs	r3, #4
 80006ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <HAL_UART_MspInit+0x90>)
 80006c0:	f000 f9e6 	bl	8000a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006c4:	2308      	movs	r3, #8
 80006c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <HAL_UART_MspInit+0x90>)
 80006d8:	f000 f9da 	bl	8000a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40004400 	.word	0x40004400
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010800 	.word	0x40010800

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000736:	f000 f8ab 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000748:	4a14      	ldr	r2, [pc, #80]	; (800079c <_sbrk+0x5c>)
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <_sbrk+0x60>)
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <_sbrk+0x64>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <_sbrk+0x64>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <_sbrk+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <_sbrk+0x64>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	429a      	cmp	r2, r3
 800076e:	d207      	bcs.n	8000780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000770:	f002 f908 	bl	8002984 <__errno>
 8000774:	4603      	mov	r3, r0
 8000776:	220c      	movs	r2, #12
 8000778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	e009      	b.n	8000794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <_sbrk+0x64>)
 8000790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000792:	68fb      	ldr	r3, [r7, #12]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20005000 	.word	0x20005000
 80007a0:	00000400 	.word	0x00000400
 80007a4:	200000e4 	.word	0x200000e4
 80007a8:	20000100 	.word	0x20000100

080007ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ba:	490d      	ldr	r1, [pc, #52]	; (80007f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007d0:	4c0a      	ldr	r4, [pc, #40]	; (80007fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007de:	f7ff ffe5 	bl	80007ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007e2:	f002 f8d5 	bl	8002990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e6:	f7ff fcb9 	bl	800015c <main>
  bx lr
 80007ea:	4770      	bx	lr
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007f4:	0800341c 	.word	0x0800341c
  ldr r2, =_sbss
 80007f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007fc:	200000fc 	.word	0x200000fc

08000800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC1_2_IRQHandler>
	...

08000804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_Init+0x28>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_Init+0x28>)
 800080e:	f043 0310 	orr.w	r3, r3, #16
 8000812:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000814:	2003      	movs	r0, #3
 8000816:	f000 f907 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800081a:	200f      	movs	r0, #15
 800081c:	f000 f808 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000820:	f7ff fed6 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x54>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_InitTick+0x58>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	fbb3 f3f1 	udiv	r3, r3, r1
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f911 	bl	8000a76 <HAL_SYSTICK_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e00e      	b.n	800087c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d80a      	bhi.n	800087a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	f000 f8e7 	bl	8000a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <HAL_InitTick+0x5c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x1c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_IncTick+0x20>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a03      	ldr	r2, [pc, #12]	; (80008b0 <HAL_IncTick+0x20>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	20000008 	.word	0x20000008
 80008b0:	200000e8 	.word	0x200000e8

080008b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <HAL_GetTick+0x10>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	200000e8 	.word	0x200000e8

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f4:	d301      	bcc.n	80009fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00f      	b.n	8000a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <SysTick_Config+0x40>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a02:	210f      	movs	r1, #15
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f7ff ff90 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SysTick_Config+0x40>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <SysTick_Config+0x40>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff49 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff5e 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff90 	bl	8000980 <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5f 	bl	800092c <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffb0 	bl	80009e4 <SysTick_Config>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b08b      	sub	sp, #44	; 0x2c
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	e169      	b.n	8000d78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f040 8158 	bne.w	8000d72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	4a9a      	ldr	r2, [pc, #616]	; (8000d30 <HAL_GPIO_Init+0x2a0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d05e      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000acc:	4a98      	ldr	r2, [pc, #608]	; (8000d30 <HAL_GPIO_Init+0x2a0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d875      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000ad2:	4a98      	ldr	r2, [pc, #608]	; (8000d34 <HAL_GPIO_Init+0x2a4>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d058      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000ad8:	4a96      	ldr	r2, [pc, #600]	; (8000d34 <HAL_GPIO_Init+0x2a4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d86f      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000ade:	4a96      	ldr	r2, [pc, #600]	; (8000d38 <HAL_GPIO_Init+0x2a8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d052      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000ae4:	4a94      	ldr	r2, [pc, #592]	; (8000d38 <HAL_GPIO_Init+0x2a8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d869      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000aea:	4a94      	ldr	r2, [pc, #592]	; (8000d3c <HAL_GPIO_Init+0x2ac>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d04c      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000af0:	4a92      	ldr	r2, [pc, #584]	; (8000d3c <HAL_GPIO_Init+0x2ac>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d863      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000af6:	4a92      	ldr	r2, [pc, #584]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d046      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000afc:	4a90      	ldr	r2, [pc, #576]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d85d      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000b02:	2b12      	cmp	r3, #18
 8000b04:	d82a      	bhi.n	8000b5c <HAL_GPIO_Init+0xcc>
 8000b06:	2b12      	cmp	r3, #18
 8000b08:	d859      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000b0a:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <HAL_GPIO_Init+0x80>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b8b 	.word	0x08000b8b
 8000b14:	08000b65 	.word	0x08000b65
 8000b18:	08000b77 	.word	0x08000b77
 8000b1c:	08000bb9 	.word	0x08000bb9
 8000b20:	08000bbf 	.word	0x08000bbf
 8000b24:	08000bbf 	.word	0x08000bbf
 8000b28:	08000bbf 	.word	0x08000bbf
 8000b2c:	08000bbf 	.word	0x08000bbf
 8000b30:	08000bbf 	.word	0x08000bbf
 8000b34:	08000bbf 	.word	0x08000bbf
 8000b38:	08000bbf 	.word	0x08000bbf
 8000b3c:	08000bbf 	.word	0x08000bbf
 8000b40:	08000bbf 	.word	0x08000bbf
 8000b44:	08000bbf 	.word	0x08000bbf
 8000b48:	08000bbf 	.word	0x08000bbf
 8000b4c:	08000bbf 	.word	0x08000bbf
 8000b50:	08000bbf 	.word	0x08000bbf
 8000b54:	08000b6d 	.word	0x08000b6d
 8000b58:	08000b81 	.word	0x08000b81
 8000b5c:	4a79      	ldr	r2, [pc, #484]	; (8000d44 <HAL_GPIO_Init+0x2b4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d013      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b62:	e02c      	b.n	8000bbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	623b      	str	r3, [r7, #32]
          break;
 8000b6a:	e029      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	3304      	adds	r3, #4
 8000b72:	623b      	str	r3, [r7, #32]
          break;
 8000b74:	e024      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	623b      	str	r3, [r7, #32]
          break;
 8000b7e:	e01f      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	330c      	adds	r3, #12
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	e01a      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d102      	bne.n	8000b98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b92:	2304      	movs	r3, #4
 8000b94:	623b      	str	r3, [r7, #32]
          break;
 8000b96:	e013      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d105      	bne.n	8000bac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	611a      	str	r2, [r3, #16]
          break;
 8000baa:	e009      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bac:	2308      	movs	r3, #8
 8000bae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	615a      	str	r2, [r3, #20]
          break;
 8000bb6:	e003      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e000      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          break;
 8000bbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	2bff      	cmp	r3, #255	; 0xff
 8000bc4:	d801      	bhi.n	8000bca <HAL_GPIO_Init+0x13a>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	e001      	b.n	8000bce <HAL_GPIO_Init+0x13e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2bff      	cmp	r3, #255	; 0xff
 8000bd4:	d802      	bhi.n	8000bdc <HAL_GPIO_Init+0x14c>
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	e002      	b.n	8000be2 <HAL_GPIO_Init+0x152>
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	3b08      	subs	r3, #8
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	210f      	movs	r1, #15
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	6a39      	ldr	r1, [r7, #32]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 80b1 	beq.w	8000d72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c10:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <HAL_GPIO_Init+0x2b8>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a4c      	ldr	r2, [pc, #304]	; (8000d48 <HAL_GPIO_Init+0x2b8>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <HAL_GPIO_Init+0x2b8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c28:	4a48      	ldr	r2, [pc, #288]	; (8000d4c <HAL_GPIO_Init+0x2bc>)
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a40      	ldr	r2, [pc, #256]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d013      	beq.n	8000c7c <HAL_GPIO_Init+0x1ec>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3f      	ldr	r2, [pc, #252]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d00d      	beq.n	8000c78 <HAL_GPIO_Init+0x1e8>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a3e      	ldr	r2, [pc, #248]	; (8000d58 <HAL_GPIO_Init+0x2c8>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d007      	beq.n	8000c74 <HAL_GPIO_Init+0x1e4>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a3d      	ldr	r2, [pc, #244]	; (8000d5c <HAL_GPIO_Init+0x2cc>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d101      	bne.n	8000c70 <HAL_GPIO_Init+0x1e0>
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	e006      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c70:	2304      	movs	r3, #4
 8000c72:	e004      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c74:	2302      	movs	r3, #2
 8000c76:	e002      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e000      	b.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c80:	f002 0203 	and.w	r2, r2, #3
 8000c84:	0092      	lsls	r2, r2, #2
 8000c86:	4093      	lsls	r3, r2
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c8e:	492f      	ldr	r1, [pc, #188]	; (8000d4c <HAL_GPIO_Init+0x2bc>)
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	089b      	lsrs	r3, r3, #2
 8000c94:	3302      	adds	r3, #2
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d006      	beq.n	8000cb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	492c      	ldr	r1, [pc, #176]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	600b      	str	r3, [r1, #0]
 8000cb4:	e006      	b.n	8000cc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	4928      	ldr	r1, [pc, #160]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d006      	beq.n	8000cde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cd0:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4922      	ldr	r1, [pc, #136]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]
 8000cdc:	e006      	b.n	8000cec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cde:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	491e      	ldr	r1, [pc, #120]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	4918      	ldr	r1, [pc, #96]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	608b      	str	r3, [r1, #8]
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	4914      	ldr	r1, [pc, #80]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d021      	beq.n	8000d64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	490e      	ldr	r1, [pc, #56]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60cb      	str	r3, [r1, #12]
 8000d2c:	e021      	b.n	8000d72 <HAL_GPIO_Init+0x2e2>
 8000d2e:	bf00      	nop
 8000d30:	10320000 	.word	0x10320000
 8000d34:	10310000 	.word	0x10310000
 8000d38:	10220000 	.word	0x10220000
 8000d3c:	10210000 	.word	0x10210000
 8000d40:	10120000 	.word	0x10120000
 8000d44:	10110000 	.word	0x10110000
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000
 8000d50:	40010800 	.word	0x40010800
 8000d54:	40010c00 	.word	0x40010c00
 8000d58:	40011000 	.word	0x40011000
 8000d5c:	40011400 	.word	0x40011400
 8000d60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_GPIO_Init+0x304>)
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	4909      	ldr	r1, [pc, #36]	; (8000d94 <HAL_GPIO_Init+0x304>)
 8000d6e:	4013      	ands	r3, r2
 8000d70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	3301      	adds	r3, #1
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f47f ae8e 	bne.w	8000aa4 <HAL_GPIO_Init+0x14>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	372c      	adds	r7, #44	; 0x2c
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	40010400 	.word	0x40010400

08000d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
 8000da4:	4613      	mov	r3, r2
 8000da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da8:	787b      	ldrb	r3, [r7, #1]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dae:	887a      	ldrh	r2, [r7, #2]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000db4:	e003      	b.n	8000dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	041a      	lsls	r2, r3, #16
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	611a      	str	r2, [r3, #16]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_PWR_EnableBkUpAccess+0x14>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	420e0020 	.word	0x420e0020

08000de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e272      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 8087 	beq.w	8000f0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e00:	4b92      	ldr	r3, [pc, #584]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 030c 	and.w	r3, r3, #12
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d00c      	beq.n	8000e26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e0c:	4b8f      	ldr	r3, [pc, #572]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 030c 	and.w	r3, r3, #12
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d112      	bne.n	8000e3e <HAL_RCC_OscConfig+0x5e>
 8000e18:	4b8c      	ldr	r3, [pc, #560]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e24:	d10b      	bne.n	8000e3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e26:	4b89      	ldr	r3, [pc, #548]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d06c      	beq.n	8000f0c <HAL_RCC_OscConfig+0x12c>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d168      	bne.n	8000f0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e24c      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e46:	d106      	bne.n	8000e56 <HAL_RCC_OscConfig+0x76>
 8000e48:	4b80      	ldr	r3, [pc, #512]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a7f      	ldr	r2, [pc, #508]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e02e      	b.n	8000eb4 <HAL_RCC_OscConfig+0xd4>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x98>
 8000e5e:	4b7b      	ldr	r3, [pc, #492]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a7a      	ldr	r2, [pc, #488]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b78      	ldr	r3, [pc, #480]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a77      	ldr	r2, [pc, #476]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e01d      	b.n	8000eb4 <HAL_RCC_OscConfig+0xd4>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0xbc>
 8000e82:	4b72      	ldr	r3, [pc, #456]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a71      	ldr	r2, [pc, #452]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b6f      	ldr	r3, [pc, #444]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a6e      	ldr	r2, [pc, #440]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e00b      	b.n	8000eb4 <HAL_RCC_OscConfig+0xd4>
 8000e9c:	4b6b      	ldr	r3, [pc, #428]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a6a      	ldr	r2, [pc, #424]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b68      	ldr	r3, [pc, #416]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a67      	ldr	r2, [pc, #412]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d013      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fcfa 	bl	80008b4 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fcf6 	bl	80008b4 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b64      	cmp	r3, #100	; 0x64
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e200      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed6:	4b5d      	ldr	r3, [pc, #372]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f0      	beq.n	8000ec4 <HAL_RCC_OscConfig+0xe4>
 8000ee2:	e014      	b.n	8000f0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fce6 	bl	80008b4 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fce2 	bl	80008b4 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b64      	cmp	r3, #100	; 0x64
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e1ec      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efe:	4b53      	ldr	r3, [pc, #332]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0x10c>
 8000f0a:	e000      	b.n	8000f0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d063      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f1a:	4b4c      	ldr	r3, [pc, #304]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 030c 	and.w	r3, r3, #12
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00b      	beq.n	8000f3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f26:	4b49      	ldr	r3, [pc, #292]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d11c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x18c>
 8000f32:	4b46      	ldr	r3, [pc, #280]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d116      	bne.n	8000f6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3e:	4b43      	ldr	r3, [pc, #268]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d005      	beq.n	8000f56 <HAL_RCC_OscConfig+0x176>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d001      	beq.n	8000f56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e1c0      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	4939      	ldr	r1, [pc, #228]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6a:	e03a      	b.n	8000fe2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d020      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <HAL_RCC_OscConfig+0x270>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fc9b 	bl	80008b4 <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f82:	f7ff fc97 	bl	80008b4 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e1a1      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f0      	beq.n	8000f82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4927      	ldr	r1, [pc, #156]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	600b      	str	r3, [r1, #0]
 8000fb4:	e015      	b.n	8000fe2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <HAL_RCC_OscConfig+0x270>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fc7a 	bl	80008b4 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fc76 	bl	80008b4 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e180      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d03a      	beq.n	8001064 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d019      	beq.n	800102a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_RCC_OscConfig+0x274>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffc:	f7ff fc5a 	bl	80008b4 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001004:	f7ff fc56 	bl	80008b4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e160      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_RCC_OscConfig+0x26c>)
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f000 fad8 	bl	80015d8 <RCC_Delay>
 8001028:	e01c      	b.n	8001064 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_RCC_OscConfig+0x274>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001030:	f7ff fc40 	bl	80008b4 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001036:	e00f      	b.n	8001058 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001038:	f7ff fc3c 	bl	80008b4 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d908      	bls.n	8001058 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e146      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000
 8001050:	42420000 	.word	0x42420000
 8001054:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001058:	4b92      	ldr	r3, [pc, #584]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1e9      	bne.n	8001038 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80a6 	beq.w	80011be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001076:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10d      	bne.n	800109e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b88      	ldr	r3, [pc, #544]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a87      	ldr	r2, [pc, #540]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b85      	ldr	r3, [pc, #532]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109a:	2301      	movs	r3, #1
 800109c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109e:	4b82      	ldr	r3, [pc, #520]	; (80012a8 <HAL_RCC_OscConfig+0x4c8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d118      	bne.n	80010dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010aa:	4b7f      	ldr	r3, [pc, #508]	; (80012a8 <HAL_RCC_OscConfig+0x4c8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a7e      	ldr	r2, [pc, #504]	; (80012a8 <HAL_RCC_OscConfig+0x4c8>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fbfd 	bl	80008b4 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010be:	f7ff fbf9 	bl	80008b4 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b64      	cmp	r3, #100	; 0x64
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e103      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d0:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <HAL_RCC_OscConfig+0x4c8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d106      	bne.n	80010f2 <HAL_RCC_OscConfig+0x312>
 80010e4:	4b6f      	ldr	r3, [pc, #444]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	4a6e      	ldr	r2, [pc, #440]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6213      	str	r3, [r2, #32]
 80010f0:	e02d      	b.n	800114e <HAL_RCC_OscConfig+0x36e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x334>
 80010fa:	4b6a      	ldr	r3, [pc, #424]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	4a69      	ldr	r2, [pc, #420]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	6213      	str	r3, [r2, #32]
 8001106:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	4a66      	ldr	r2, [pc, #408]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	f023 0304 	bic.w	r3, r3, #4
 8001110:	6213      	str	r3, [r2, #32]
 8001112:	e01c      	b.n	800114e <HAL_RCC_OscConfig+0x36e>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b05      	cmp	r3, #5
 800111a:	d10c      	bne.n	8001136 <HAL_RCC_OscConfig+0x356>
 800111c:	4b61      	ldr	r3, [pc, #388]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	4a60      	ldr	r2, [pc, #384]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6213      	str	r3, [r2, #32]
 8001128:	4b5e      	ldr	r3, [pc, #376]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a5d      	ldr	r2, [pc, #372]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6213      	str	r3, [r2, #32]
 8001134:	e00b      	b.n	800114e <HAL_RCC_OscConfig+0x36e>
 8001136:	4b5b      	ldr	r3, [pc, #364]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	4a5a      	ldr	r2, [pc, #360]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	6213      	str	r3, [r2, #32]
 8001142:	4b58      	ldr	r3, [pc, #352]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	4a57      	ldr	r2, [pc, #348]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	f023 0304 	bic.w	r3, r3, #4
 800114c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d015      	beq.n	8001182 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001156:	f7ff fbad 	bl	80008b4 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115c:	e00a      	b.n	8001174 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115e:	f7ff fba9 	bl	80008b4 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	f241 3288 	movw	r2, #5000	; 0x1388
 800116c:	4293      	cmp	r3, r2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e0b1      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001174:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0ee      	beq.n	800115e <HAL_RCC_OscConfig+0x37e>
 8001180:	e014      	b.n	80011ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001182:	f7ff fb97 	bl	80008b4 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001188:	e00a      	b.n	80011a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118a:	f7ff fb93 	bl	80008b4 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	; 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e09b      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a0:	4b40      	ldr	r3, [pc, #256]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1ee      	bne.n	800118a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d105      	bne.n	80011be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a3b      	ldr	r2, [pc, #236]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 8087 	beq.w	80012d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c8:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d061      	beq.n	8001298 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d146      	bne.n	800126a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <HAL_RCC_OscConfig+0x4cc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff fb67 	bl	80008b4 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ea:	f7ff fb63 	bl	80008b4 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e06d      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f0      	bne.n	80011ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001210:	d108      	bne.n	8001224 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	4921      	ldr	r1, [pc, #132]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a19      	ldr	r1, [r3, #32]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	430b      	orrs	r3, r1
 8001236:	491b      	ldr	r1, [pc, #108]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 8001238:	4313      	orrs	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_RCC_OscConfig+0x4cc>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fb37 	bl	80008b4 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800124a:	f7ff fb33 	bl	80008b4 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e03d      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x46a>
 8001268:	e035      	b.n	80012d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_RCC_OscConfig+0x4cc>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fb20 	bl	80008b4 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001278:	f7ff fb1c 	bl	80008b4 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e026      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x498>
 8001296:	e01e      	b.n	80012d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d107      	bne.n	80012b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e019      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40007000 	.word	0x40007000
 80012ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_RCC_OscConfig+0x500>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d106      	bne.n	80012d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0d0      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012f8:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d910      	bls.n	8001328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 0207 	bic.w	r2, r3, #7
 800130e:	4965      	ldr	r1, [pc, #404]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001316:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0b8      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d020      	beq.n	8001376 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001340:	4b59      	ldr	r3, [pc, #356]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4a58      	ldr	r2, [pc, #352]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800134a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001358:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001362:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001364:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	494d      	ldr	r1, [pc, #308]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d040      	beq.n	8001404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d107      	bne.n	800139a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d115      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e07f      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d107      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a2:	4b41      	ldr	r3, [pc, #260]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d109      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e073      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e06b      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c2:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f023 0203 	bic.w	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4936      	ldr	r1, [pc, #216]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d4:	f7ff fa6e 	bl	80008b4 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013dc:	f7ff fa6a 	bl	80008b4 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e053      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f2:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 020c 	and.w	r2, r3, #12
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	429a      	cmp	r2, r3
 8001402:	d1eb      	bne.n	80013dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d210      	bcs.n	8001434 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 0207 	bic.w	r2, r3, #7
 800141a:	4922      	ldr	r1, [pc, #136]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d001      	beq.n	8001434 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e032      	b.n	800149a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	d008      	beq.n	8001452 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4916      	ldr	r1, [pc, #88]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d009      	beq.n	8001472 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	490e      	ldr	r1, [pc, #56]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001472:	f000 f821 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8001476:	4602      	mov	r2, r0
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	490a      	ldr	r1, [pc, #40]	; (80014ac <HAL_RCC_ClockConfig+0x1c8>)
 8001484:	5ccb      	ldrb	r3, [r1, r3]
 8001486:	fa22 f303 	lsr.w	r3, r2, r3
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <HAL_RCC_ClockConfig+0x1cc>)
 800148c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f9cc 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40022000 	.word	0x40022000
 80014a8:	40021000 	.word	0x40021000
 80014ac:	080033c8 	.word	0x080033c8
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004

080014b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b8:	b490      	push	{r4, r7}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014be:	4b29      	ldr	r3, [pc, #164]	; (8001564 <HAL_RCC_GetSysClockFreq+0xac>)
 80014c0:	1d3c      	adds	r4, r7, #4
 80014c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014c8:	f240 2301 	movw	r3, #513	; 0x201
 80014cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d002      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0x40>
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d003      	beq.n	80014fe <HAL_RCC_GetSysClockFreq+0x46>
 80014f6:	e02b      	b.n	8001550 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_RCC_GetSysClockFreq+0xb4>)
 80014fa:	623b      	str	r3, [r7, #32]
      break;
 80014fc:	e02b      	b.n	8001556 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	0c9b      	lsrs	r3, r3, #18
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3328      	adds	r3, #40	; 0x28
 8001508:	443b      	add	r3, r7
 800150a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800150e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d012      	beq.n	8001540 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_RCC_GetSysClockFreq+0xb0>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	0c5b      	lsrs	r3, r3, #17
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	3328      	adds	r3, #40	; 0x28
 8001526:	443b      	add	r3, r7
 8001528:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800152c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001532:	fb03 f202 	mul.w	r2, r3, r2
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	fbb2 f3f3 	udiv	r3, r2, r3
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
 800153e:	e004      	b.n	800154a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	623b      	str	r3, [r7, #32]
      break;
 800154e:	e002      	b.n	8001556 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001552:	623b      	str	r3, [r7, #32]
      break;
 8001554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001556:	6a3b      	ldr	r3, [r7, #32]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3728      	adds	r7, #40	; 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bc90      	pop	{r4, r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	080033a8 	.word	0x080033a8
 8001568:	40021000 	.word	0x40021000
 800156c:	007a1200 	.word	0x007a1200
 8001570:	003d0900 	.word	0x003d0900

08001574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <HAL_RCC_GetHCLKFreq+0x10>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	20000000 	.word	0x20000000

08001588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800158c:	f7ff fff2 	bl	8001574 <HAL_RCC_GetHCLKFreq>
 8001590:	4602      	mov	r2, r0
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	4903      	ldr	r1, [pc, #12]	; (80015ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800159e:	5ccb      	ldrb	r3, [r1, r3]
 80015a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	080033d8 	.word	0x080033d8

080015b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015b4:	f7ff ffde 	bl	8001574 <HAL_RCC_GetHCLKFreq>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	0adb      	lsrs	r3, r3, #11
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	4903      	ldr	r1, [pc, #12]	; (80015d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015c6:	5ccb      	ldrb	r3, [r1, r3]
 80015c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000
 80015d4:	080033d8 	.word	0x080033d8

080015d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <RCC_Delay+0x34>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <RCC_Delay+0x38>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	0a5b      	lsrs	r3, r3, #9
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015f4:	bf00      	nop
  }
  while (Delay --);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1e5a      	subs	r2, r3, #1
 80015fa:	60fa      	str	r2, [r7, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f9      	bne.n	80015f4 <RCC_Delay+0x1c>
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	20000000 	.word	0x20000000
 8001610:	10624dd3 	.word	0x10624dd3

08001614 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d07d      	beq.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001634:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10d      	bne.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001640:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	4a4b      	ldr	r2, [pc, #300]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164a:	61d3      	str	r3, [r2, #28]
 800164c:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001658:	2301      	movs	r3, #1
 800165a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001664:	2b00      	cmp	r3, #0
 8001666:	d118      	bne.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001668:	4b43      	ldr	r3, [pc, #268]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a42      	ldr	r2, [pc, #264]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800166e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001672:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001674:	f7ff f91e 	bl	80008b4 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167a:	e008      	b.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167c:	f7ff f91a 	bl	80008b4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e06d      	b.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d02e      	beq.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d027      	beq.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016b8:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016c2:	4b2e      	ldr	r3, [pc, #184]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016c8:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016ce:	4a29      	ldr	r2, [pc, #164]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d014      	beq.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff f8e9 	bl	80008b4 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	e00a      	b.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff f8e5 	bl	80008b4 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e036      	b.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ee      	beq.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4917      	ldr	r1, [pc, #92]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001716:	4313      	orrs	r3, r2
 8001718:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	4a13      	ldr	r2, [pc, #76]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	490b      	ldr	r1, [pc, #44]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b00      	cmp	r3, #0
 8001754:	d008      	beq.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	4904      	ldr	r1, [pc, #16]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	40007000 	.word	0x40007000
 800177c:	42420440 	.word	0x42420440

08001780 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b08d      	sub	sp, #52	; 0x34
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001788:	4b58      	ldr	r3, [pc, #352]	; (80018ec <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800178a:	f107 040c 	add.w	r4, r7, #12
 800178e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001794:	f240 2301 	movw	r3, #513	; 0x201
 8001798:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	2300      	movs	r3, #0
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d00a      	beq.n	80017ca <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	f200 808e 	bhi.w	80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d049      	beq.n	8001856 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d079      	beq.n	80018bc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80017c8:	e086      	b.n	80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80017d0:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d07f      	beq.n	80018dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	0c9b      	lsrs	r3, r3, #18
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	3330      	adds	r3, #48	; 0x30
 80017e6:	443b      	add	r3, r7
 80017e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017ec:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d017      	beq.n	8001828 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017f8:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	0c5b      	lsrs	r3, r3, #17
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	3330      	adds	r3, #48	; 0x30
 8001804:	443b      	add	r3, r7
 8001806:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00d      	beq.n	8001832 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001816:	4a37      	ldr	r2, [pc, #220]	; (80018f4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	fbb2 f2f3 	udiv	r2, r2, r3
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001826:	e004      	b.n	8001832 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	4a33      	ldr	r2, [pc, #204]	; (80018f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800183e:	d102      	bne.n	8001846 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001844:	e04a      	b.n	80018dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001854:	e042      	b.n	80018dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001866:	d108      	bne.n	800187a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8001872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
 8001878:	e01f      	b.n	80018ba <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001884:	d109      	bne.n	800189a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8001892:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
 8001898:	e00f      	b.n	80018ba <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018a4:	d11c      	bne.n	80018e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d016      	beq.n	80018e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80018b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80018b8:	e012      	b.n	80018e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80018ba:	e011      	b.n	80018e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80018bc:	f7ff fe78 	bl	80015b0 <HAL_RCC_GetPCLK2Freq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	0b9b      	lsrs	r3, r3, #14
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	3301      	adds	r3, #1
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80018d6:	e004      	b.n	80018e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80018d8:	bf00      	nop
 80018da:	e002      	b.n	80018e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80018dc:	bf00      	nop
 80018de:	e000      	b.n	80018e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80018e0:	bf00      	nop
    }
  }
  return (frequency);
 80018e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3734      	adds	r7, #52	; 0x34
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	080033b8 	.word	0x080033b8
 80018f0:	40021000 	.word	0x40021000
 80018f4:	007a1200 	.word	0x007a1200
 80018f8:	003d0900 	.word	0x003d0900
 80018fc:	aaaaaaab 	.word	0xaaaaaaab

08001900 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e084      	b.n	8001a20 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7c5b      	ldrb	r3, [r3, #17]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7fe fe74 	bl	8000614 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 faf4 	bl	8001f20 <HAL_RTC_WaitForSynchro>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2204      	movs	r2, #4
 8001942:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e06b      	b.n	8001a20 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fbad 	bl	80020a8 <RTC_EnterInitMode>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2204      	movs	r2, #4
 8001958:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e060      	b.n	8001a20 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0207 	bic.w	r2, r2, #7
 800196c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_RTC_Init+0x128>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a2b      	ldr	r2, [pc, #172]	; (8001a28 <HAL_RTC_Init+0x128>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001982:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <HAL_RTC_Init+0x128>)
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	4926      	ldr	r1, [pc, #152]	; (8001a28 <HAL_RTC_Init+0x128>)
 8001990:	4313      	orrs	r3, r2
 8001992:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d003      	beq.n	80019a6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e00e      	b.n	80019c4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f7ff feea 	bl	8001780 <HAL_RCCEx_GetPeriphCLKFreq>
 80019ac:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d104      	bne.n	80019be <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2204      	movs	r2, #4
 80019b8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e030      	b.n	8001a20 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 010f 	bic.w	r1, r3, #15
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	0c1a      	lsrs	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	041b      	lsls	r3, r3, #16
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	b291      	uxth	r1, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fb81 	bl	80020f8 <RTC_ExitInitMode>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2204      	movs	r2, #4
 8001a00:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00c      	b.n	8001a20 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
  }
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40006c00 	.word	0x40006c00

08001a2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_RTC_SetTime+0x20>
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e080      	b.n	8001b52 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	7c1b      	ldrb	r3, [r3, #16]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_RTC_SetTime+0x30>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e07a      	b.n	8001b52 <HAL_RTC_SetTime+0x126>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2202      	movs	r2, #2
 8001a66:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d113      	bne.n	8001a96 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a78:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	4619      	mov	r1, r3
 8001a82:	460b      	mov	r3, r1
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	1a5b      	subs	r3, r3, r1
 8001a88:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a8a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a90:	4413      	add	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e01e      	b.n	8001ad4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fb71 	bl	8002182 <RTC_Bcd2ToByte>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001aa8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	785b      	ldrb	r3, [r3, #1]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fb66 	bl	8002182 <RTC_Bcd2ToByte>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4613      	mov	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ac2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	789b      	ldrb	r3, [r3, #2]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fb5a 	bl	8002182 <RTC_Bcd2ToByte>
 8001ace:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ad0:	4423      	add	r3, r4
 8001ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001ad4:	6979      	ldr	r1, [r7, #20]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 fa7f 	bl	8001fda <RTC_WriteTimeCounter>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e02f      	b.n	8001b52 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0205 	bic.w	r2, r2, #5
 8001b00:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 fa90 	bl	8002028 <RTC_ReadAlarmCounter>
 8001b08:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d018      	beq.n	8001b44 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d214      	bcs.n	8001b44 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001b20:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b24:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001b26:	6939      	ldr	r1, [r7, #16]
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fa96 	bl	800205a <RTC_WriteAlarmCounter>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2204      	movs	r2, #4
 8001b38:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e006      	b.n	8001b52 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001b50:	2300      	movs	r3, #0
  }
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}
	...

08001b5c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_RTC_GetTime+0x28>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0b5      	b.n	8001cf4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0ac      	b.n	8001cf4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f9ed 	bl	8001f7a <RTC_ReadTimeCounter>
 8001ba0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4a55      	ldr	r2, [pc, #340]	; (8001cfc <HAL_RTC_GetTime+0x1a0>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	0adb      	lsrs	r3, r3, #11
 8001bac:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4b52      	ldr	r3, [pc, #328]	; (8001cfc <HAL_RTC_GetTime+0x1a0>)
 8001bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8001bb6:	0adb      	lsrs	r3, r3, #11
 8001bb8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	4a4f      	ldr	r2, [pc, #316]	; (8001d00 <HAL_RTC_GetTime+0x1a4>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	4a4a      	ldr	r2, [pc, #296]	; (8001cfc <HAL_RTC_GetTime+0x1a0>)
 8001bd4:	fba2 1203 	umull	r1, r2, r2, r3
 8001bd8:	0ad2      	lsrs	r2, r2, #11
 8001bda:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001bde:	fb01 f202 	mul.w	r2, r1, r2
 8001be2:	1a9a      	subs	r2, r3, r2
 8001be4:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <HAL_RTC_GetTime+0x1a4>)
 8001be6:	fba3 1302 	umull	r1, r3, r3, r2
 8001bea:	0959      	lsrs	r1, r3, #5
 8001bec:	460b      	mov	r3, r1
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	1a5b      	subs	r3, r3, r1
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	1ad1      	subs	r1, r2, r3
 8001bf6:	b2ca      	uxtb	r2, r1
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b17      	cmp	r3, #23
 8001c00:	d955      	bls.n	8001cae <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4a3f      	ldr	r2, [pc, #252]	; (8001d04 <HAL_RTC_GetTime+0x1a8>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001c0e:	6939      	ldr	r1, [r7, #16]
 8001c10:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <HAL_RTC_GetTime+0x1a8>)
 8001c12:	fba3 2301 	umull	r2, r3, r3, r1
 8001c16:	091a      	lsrs	r2, r3, #4
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	1aca      	subs	r2, r1, r3
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f9fd 	bl	8002028 <RTC_ReadAlarmCounter>
 8001c2e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c36:	d008      	beq.n	8001c4a <HAL_RTC_GetTime+0xee>
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d904      	bls.n	8001c4a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	e002      	b.n	8001c50 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	4a2d      	ldr	r2, [pc, #180]	; (8001d08 <HAL_RTC_GetTime+0x1ac>)
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001c5e:	69b9      	ldr	r1, [r7, #24]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f9ba 	bl	8001fda <RTC_WriteTimeCounter>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e041      	b.n	8001cf4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c76:	d00c      	beq.n	8001c92 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001c80:	69f9      	ldr	r1, [r7, #28]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f9e9 	bl	800205a <RTC_WriteAlarmCounter>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e030      	b.n	8001cf4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001c92:	69f9      	ldr	r1, [r7, #28]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f9e0 	bl	800205a <RTC_WriteAlarmCounter>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e027      	b.n	8001cf4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001ca4:	6979      	ldr	r1, [r7, #20]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fa88 	bl	80021bc <RTC_DateUpdate>
 8001cac:	e003      	b.n	8001cb6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01a      	beq.n	8001cf2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fa41 	bl	8002148 <RTC_ByteToBcd2>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 fa38 	bl	8002148 <RTC_ByteToBcd2>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	789b      	ldrb	r3, [r3, #2]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fa2f 	bl	8002148 <RTC_ByteToBcd2>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	91a2b3c5 	.word	0x91a2b3c5
 8001d00:	88888889 	.word	0x88888889
 8001d04:	aaaaaaab 	.word	0xaaaaaaab
 8001d08:	00015180 	.word	0x00015180

08001d0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_RTC_SetDate+0x24>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e097      	b.n	8001e64 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	7c1b      	ldrb	r3, [r3, #16]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_RTC_SetDate+0x34>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e091      	b.n	8001e64 <HAL_RTC_SetDate+0x158>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10c      	bne.n	8001d6c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	78da      	ldrb	r2, [r3, #3]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	785a      	ldrb	r2, [r3, #1]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	789a      	ldrb	r2, [r3, #2]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	739a      	strb	r2, [r3, #14]
 8001d6a:	e01a      	b.n	8001da2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	78db      	ldrb	r3, [r3, #3]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fa06 	bl	8002182 <RTC_Bcd2ToByte>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	785b      	ldrb	r3, [r3, #1]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f9fd 	bl	8002182 <RTC_Bcd2ToByte>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	789b      	ldrb	r3, [r3, #2]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 f9f4 	bl	8002182 <RTC_Bcd2ToByte>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	7bdb      	ldrb	r3, [r3, #15]
 8001da6:	4618      	mov	r0, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	7b59      	ldrb	r1, [r3, #13]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	7b9b      	ldrb	r3, [r3, #14]
 8001db0:	461a      	mov	r2, r3
 8001db2:	f000 fadf 	bl	8002374 <RTC_WeekDayNum>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	7b1a      	ldrb	r2, [r3, #12]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f8d7 	bl	8001f7a <RTC_ReadTimeCounter>
 8001dcc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <HAL_RTC_SetDate+0x160>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0adb      	lsrs	r3, r3, #11
 8001dd8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b18      	cmp	r3, #24
 8001dde:	d93a      	bls.n	8001e56 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <HAL_RTC_SetDate+0x164>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <HAL_RTC_SetDate+0x168>)
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001df6:	69f9      	ldr	r1, [r7, #28]
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f8ee 	bl	8001fda <RTC_WriteTimeCounter>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2204      	movs	r2, #4
 8001e08:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e027      	b.n	8001e64 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f907 	bl	8002028 <RTC_ReadAlarmCounter>
 8001e1a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e22:	d018      	beq.n	8001e56 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d214      	bcs.n	8001e56 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001e32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e36:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001e38:	69b9      	ldr	r1, [r7, #24]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f90d 	bl	800205a <RTC_WriteAlarmCounter>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e006      	b.n	8001e64 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	91a2b3c5 	.word	0x91a2b3c5
 8001e70:	aaaaaaab 	.word	0xaaaaaaab
 8001e74:	00015180 	.word	0x00015180

08001e78 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2100      	movs	r1, #0
 8001e8a:	460a      	mov	r2, r1
 8001e8c:	801a      	strh	r2, [r3, #0]
 8001e8e:	460a      	mov	r2, r1
 8001e90:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_RTC_GetDate+0x26>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e03a      	b.n	8001f18 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7ff fe56 	bl	8001b5c <HAL_RTC_GetTime>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e02e      	b.n	8001f18 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	7b1a      	ldrb	r2, [r3, #12]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	7bda      	ldrb	r2, [r3, #15]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	7b5a      	ldrb	r2, [r3, #13]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	7b9a      	ldrb	r2, [r3, #14]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01a      	beq.n	8001f16 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	78db      	ldrb	r3, [r3, #3]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 f92f 	bl	8002148 <RTC_ByteToBcd2>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	785b      	ldrb	r3, [r3, #1]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f926 	bl	8002148 <RTC_ByteToBcd2>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	789b      	ldrb	r3, [r3, #2]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f91d 	bl	8002148 <RTC_ByteToBcd2>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e01d      	b.n	8001f72 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0208 	bic.w	r2, r2, #8
 8001f44:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001f46:	f7fe fcb5 	bl	80008b4 <HAL_GetTick>
 8001f4a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001f4c:	e009      	b.n	8001f62 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001f4e:	f7fe fcb1 	bl	80008b4 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f5c:	d901      	bls.n	8001f62 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e007      	b.n	8001f72 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ee      	beq.n	8001f4e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b087      	sub	sp, #28
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	827b      	strh	r3, [r7, #18]
 8001f86:	2300      	movs	r3, #0
 8001f88:	823b      	strh	r3, [r7, #16]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001faa:	8a7a      	ldrh	r2, [r7, #18]
 8001fac:	8a3b      	ldrh	r3, [r7, #16]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d008      	beq.n	8001fc4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001fb2:	8a3b      	ldrh	r3, [r7, #16]
 8001fb4:	041a      	lsls	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	e004      	b.n	8001fce <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001fc4:	8a7b      	ldrh	r3, [r7, #18]
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	89fb      	ldrh	r3, [r7, #14]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001fce:	697b      	ldr	r3, [r7, #20]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f85d 	bl	80020a8 <RTC_EnterInitMode>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e011      	b.n	800201e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	0c12      	lsrs	r2, r2, #16
 8002002:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	b292      	uxth	r2, r2
 800200c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f872 	bl	80020f8 <RTC_ExitInitMode>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	81fb      	strh	r3, [r7, #14]
 8002034:	2300      	movs	r3, #0
 8002036:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002048:	89fb      	ldrh	r3, [r7, #14]
 800204a:	041a      	lsls	r2, r3, #16
 800204c:	89bb      	ldrh	r3, [r7, #12]
 800204e:	4313      	orrs	r3, r2
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f81d 	bl	80020a8 <RTC_EnterInitMode>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e011      	b.n	800209e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	0c12      	lsrs	r2, r2, #16
 8002082:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b292      	uxth	r2, r2
 800208c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f832 	bl	80020f8 <RTC_ExitInitMode>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80020b4:	f7fe fbfe 	bl	80008b4 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020ba:	e009      	b.n	80020d0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020bc:	f7fe fbfa 	bl	80008b4 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ca:	d901      	bls.n	80020d0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e00f      	b.n	80020f0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0ee      	beq.n	80020bc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0210 	orr.w	r2, r2, #16
 80020ec:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0210 	bic.w	r2, r2, #16
 8002112:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002114:	f7fe fbce 	bl	80008b4 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800211a:	e009      	b.n	8002130 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800211c:	f7fe fbca 	bl	80008b4 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800212a:	d901      	bls.n	8002130 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e007      	b.n	8002140 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0ee      	beq.n	800211c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002156:	e005      	b.n	8002164 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3301      	adds	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	3b0a      	subs	r3, #10
 8002162:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	2b09      	cmp	r3, #9
 8002168:	d8f6      	bhi.n	8002158 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	b2da      	uxtb	r2, r3
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	4313      	orrs	r3, r2
 8002176:	b2db      	uxtb	r3, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	b2db      	uxtb	r3, r3
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7bdb      	ldrb	r3, [r3, #15]
 80021da:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7b5b      	ldrb	r3, [r3, #13]
 80021e0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7b9b      	ldrb	r3, [r3, #14]
 80021e6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	e06f      	b.n	80022ce <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d011      	beq.n	8002218 <RTC_DateUpdate+0x5c>
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d00e      	beq.n	8002218 <RTC_DateUpdate+0x5c>
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d00b      	beq.n	8002218 <RTC_DateUpdate+0x5c>
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b07      	cmp	r3, #7
 8002204:	d008      	beq.n	8002218 <RTC_DateUpdate+0x5c>
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d005      	beq.n	8002218 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b0a      	cmp	r3, #10
 8002210:	d002      	beq.n	8002218 <RTC_DateUpdate+0x5c>
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b0c      	cmp	r3, #12
 8002216:	d117      	bne.n	8002248 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b1e      	cmp	r3, #30
 800221c:	d803      	bhi.n	8002226 <RTC_DateUpdate+0x6a>
      {
        day++;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002224:	e050      	b.n	80022c8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	d005      	beq.n	8002238 <RTC_DateUpdate+0x7c>
        {
          month++;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	3301      	adds	r3, #1
 8002230:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002232:	2301      	movs	r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002236:	e047      	b.n	80022c8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002238:	2301      	movs	r3, #1
 800223a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800223c:	2301      	movs	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
          year++;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3301      	adds	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002246:	e03f      	b.n	80022c8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b04      	cmp	r3, #4
 800224c:	d008      	beq.n	8002260 <RTC_DateUpdate+0xa4>
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b06      	cmp	r3, #6
 8002252:	d005      	beq.n	8002260 <RTC_DateUpdate+0xa4>
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d002      	beq.n	8002260 <RTC_DateUpdate+0xa4>
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b0b      	cmp	r3, #11
 800225e:	d10c      	bne.n	800227a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b1d      	cmp	r3, #29
 8002264:	d803      	bhi.n	800226e <RTC_DateUpdate+0xb2>
      {
        day++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800226c:	e02c      	b.n	80022c8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	3301      	adds	r3, #1
 8002272:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002274:	2301      	movs	r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002278:	e026      	b.n	80022c8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d123      	bne.n	80022c8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b1b      	cmp	r3, #27
 8002284:	d803      	bhi.n	800228e <RTC_DateUpdate+0xd2>
      {
        day++;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3301      	adds	r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e01c      	b.n	80022c8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b1c      	cmp	r3, #28
 8002292:	d111      	bne.n	80022b8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f839 	bl	8002310 <RTC_IsLeapYear>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <RTC_DateUpdate+0xf0>
        {
          day++;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3301      	adds	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e00d      	b.n	80022c8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	3301      	adds	r3, #1
 80022b0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80022b2:	2301      	movs	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e007      	b.n	80022c8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b1d      	cmp	r3, #29
 80022bc:	d104      	bne.n	80022c8 <RTC_DateUpdate+0x10c>
      {
        month++;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	3301      	adds	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80022c4:	2301      	movs	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3301      	adds	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d38b      	bcc.n	80021ee <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f000 f83b 	bl	8002374 <RTC_WeekDayNum>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	731a      	strb	r2, [r3, #12]
}
 8002306:	bf00      	nop
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	e01d      	b.n	8002366 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	4a10      	ldr	r2, [pc, #64]	; (8002370 <RTC_IsLeapYear+0x60>)
 800232e:	fba2 1203 	umull	r1, r2, r2, r3
 8002332:	0952      	lsrs	r2, r2, #5
 8002334:	2164      	movs	r1, #100	; 0x64
 8002336:	fb01 f202 	mul.w	r2, r1, r2
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	4a09      	ldr	r2, [pc, #36]	; (8002370 <RTC_IsLeapYear+0x60>)
 800234a:	fba2 1203 	umull	r1, r2, r2, r3
 800234e:	09d2      	lsrs	r2, r2, #7
 8002350:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002354:	fb01 f202 	mul.w	r2, r1, r2
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002364:	2300      	movs	r3, #0
  }
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	51eb851f 	.word	0x51eb851f

08002374 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
 8002380:	4613      	mov	r3, r2
 8002382:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002392:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d82d      	bhi.n	80023f6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	4a2c      	ldr	r2, [pc, #176]	; (8002458 <RTC_WeekDayNum+0xe4>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	085a      	lsrs	r2, r3, #1
 80023ae:	78bb      	ldrb	r3, [r7, #2]
 80023b0:	441a      	add	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	441a      	add	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	441a      	add	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	4926      	ldr	r1, [pc, #152]	; (800245c <RTC_WeekDayNum+0xe8>)
 80023c4:	fba1 1303 	umull	r1, r3, r1, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	1ad2      	subs	r2, r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	4922      	ldr	r1, [pc, #136]	; (800245c <RTC_WeekDayNum+0xe8>)
 80023d2:	fba1 1303 	umull	r1, r3, r1, r3
 80023d6:	09db      	lsrs	r3, r3, #7
 80023d8:	4413      	add	r3, r2
 80023da:	1d1a      	adds	r2, r3, #4
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <RTC_WeekDayNum+0xec>)
 80023de:	fba3 1302 	umull	r1, r3, r3, r2
 80023e2:	1ad1      	subs	r1, r2, r3
 80023e4:	0849      	lsrs	r1, r1, #1
 80023e6:	440b      	add	r3, r1
 80023e8:	0899      	lsrs	r1, r3, #2
 80023ea:	460b      	mov	r3, r1
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	1a5b      	subs	r3, r3, r1
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e029      	b.n	800244a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	4a15      	ldr	r2, [pc, #84]	; (8002458 <RTC_WeekDayNum+0xe4>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	085a      	lsrs	r2, r3, #1
 800240a:	78bb      	ldrb	r3, [r7, #2]
 800240c:	441a      	add	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	441a      	add	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	441a      	add	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4910      	ldr	r1, [pc, #64]	; (800245c <RTC_WeekDayNum+0xe8>)
 800241c:	fba1 1303 	umull	r1, r3, r1, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	1ad2      	subs	r2, r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	490d      	ldr	r1, [pc, #52]	; (800245c <RTC_WeekDayNum+0xe8>)
 8002428:	fba1 1303 	umull	r1, r3, r1, r3
 800242c:	09db      	lsrs	r3, r3, #7
 800242e:	4413      	add	r3, r2
 8002430:	1c9a      	adds	r2, r3, #2
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <RTC_WeekDayNum+0xec>)
 8002434:	fba3 1302 	umull	r1, r3, r3, r2
 8002438:	1ad1      	subs	r1, r2, r3
 800243a:	0849      	lsrs	r1, r1, #1
 800243c:	440b      	add	r3, r1
 800243e:	0899      	lsrs	r1, r3, #2
 8002440:	460b      	mov	r3, r1
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	1a5b      	subs	r3, r3, r1
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	b2db      	uxtb	r3, r3
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	38e38e39 	.word	0x38e38e39
 800245c:	51eb851f 	.word	0x51eb851f
 8002460:	24924925 	.word	0x24924925

08002464 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <HAL_RTCEx_BKUPWrite+0x30>)
 8002476:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	4413      	add	r3, r2
 8002480:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	b292      	uxth	r2, r2
 8002488:	601a      	str	r2, [r3, #0]
}
 800248a:	bf00      	nop
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40006c00 	.word	0x40006c00

08002498 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_RTCEx_BKUPRead+0x34>)
 80024ac:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80024c0:	68bb      	ldr	r3, [r7, #8]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40006c00 	.word	0x40006c00

080024d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e03f      	b.n	8002562 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe f8b0 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2224      	movs	r2, #36	; 0x24
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f9a7 	bl	8002868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b08a      	sub	sp, #40	; 0x28
 800256e:	af02      	add	r7, sp, #8
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	d17c      	bne.n	8002684 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_UART_Transmit+0x2c>
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e075      	b.n	8002686 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_UART_Transmit+0x3e>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e06e      	b.n	8002686 <HAL_UART_Transmit+0x11c>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2221      	movs	r2, #33	; 0x21
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025be:	f7fe f979 	bl	80008b4 <HAL_GetTick>
 80025c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	88fa      	ldrh	r2, [r7, #6]
 80025ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d8:	d108      	bne.n	80025ec <HAL_UART_Transmit+0x82>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d104      	bne.n	80025ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e003      	b.n	80025f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025fc:	e02a      	b.n	8002654 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f8e2 	bl	80027d2 <UART_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e036      	b.n	8002686 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10b      	bne.n	8002636 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800262c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	3302      	adds	r3, #2
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	e007      	b.n	8002646 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3301      	adds	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1cf      	bne.n	80025fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2200      	movs	r2, #0
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f8b2 	bl	80027d2 <UART_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e006      	b.n	8002686 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b08a      	sub	sp, #40	; 0x28
 8002692:	af02      	add	r7, sp, #8
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	f040 808c 	bne.w	80027c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_UART_Receive+0x2e>
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e084      	b.n	80027ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_UART_Receive+0x40>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e07d      	b.n	80027ca <HAL_UART_Receive+0x13c>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2222      	movs	r2, #34	; 0x22
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ea:	f7fe f8e3 	bl	80008b4 <HAL_GetTick>
 80026ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002704:	d108      	bne.n	8002718 <HAL_UART_Receive+0x8a>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e003      	b.n	8002720 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002728:	e043      	b.n	80027b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	2120      	movs	r1, #32
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f84c 	bl	80027d2 <UART_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e042      	b.n	80027ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	b29b      	uxth	r3, r3
 8002752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002756:	b29a      	uxth	r2, r3
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	3302      	adds	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	e01f      	b.n	80027a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276c:	d007      	beq.n	800277e <HAL_UART_Receive+0xf0>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10a      	bne.n	800278c <HAL_UART_Receive+0xfe>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e008      	b.n	800279e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002798:	b2da      	uxtb	r2, r3
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1b6      	bne.n	800272a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027e2:	e02c      	b.n	800283e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d028      	beq.n	800283e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <UART_WaitOnFlagUntilTimeout+0x30>
 80027f2:	f7fe f85f 	bl	80008b4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d21d      	bcs.n	800283e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002810:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e00f      	b.n	800285e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4013      	ands	r3, r2
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	429a      	cmp	r2, r3
 800284c:	bf0c      	ite	eq
 800284e:	2301      	moveq	r3, #1
 8002850:	2300      	movne	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	429a      	cmp	r2, r3
 800285a:	d0c3      	beq.n	80027e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028a2:	f023 030c 	bic.w	r3, r3, #12
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	430b      	orrs	r3, r1
 80028ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2c      	ldr	r2, [pc, #176]	; (800297c <UART_SetConfig+0x114>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d103      	bne.n	80028d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028d0:	f7fe fe6e 	bl	80015b0 <HAL_RCC_GetPCLK2Freq>
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	e002      	b.n	80028de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028d8:	f7fe fe56 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
 80028dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009a      	lsls	r2, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	4a22      	ldr	r2, [pc, #136]	; (8002980 <UART_SetConfig+0x118>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	0119      	lsls	r1, r3, #4
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	009a      	lsls	r2, r3, #2
 8002908:	441a      	add	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fbb2 f2f3 	udiv	r2, r2, r3
 8002914:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <UART_SetConfig+0x118>)
 8002916:	fba3 0302 	umull	r0, r3, r3, r2
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2064      	movs	r0, #100	; 0x64
 800291e:	fb00 f303 	mul.w	r3, r0, r3
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	3332      	adds	r3, #50	; 0x32
 8002928:	4a15      	ldr	r2, [pc, #84]	; (8002980 <UART_SetConfig+0x118>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002934:	4419      	add	r1, r3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	009a      	lsls	r2, r3, #2
 8002940:	441a      	add	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fbb2 f2f3 	udiv	r2, r2, r3
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <UART_SetConfig+0x118>)
 800294e:	fba3 0302 	umull	r0, r3, r3, r2
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	2064      	movs	r0, #100	; 0x64
 8002956:	fb00 f303 	mul.w	r3, r0, r3
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	3332      	adds	r3, #50	; 0x32
 8002960:	4a07      	ldr	r2, [pc, #28]	; (8002980 <UART_SetConfig+0x118>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	f003 020f 	and.w	r2, r3, #15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	440a      	add	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40013800 	.word	0x40013800
 8002980:	51eb851f 	.word	0x51eb851f

08002984 <__errno>:
 8002984:	4b01      	ldr	r3, [pc, #4]	; (800298c <__errno+0x8>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	2000000c 	.word	0x2000000c

08002990 <__libc_init_array>:
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	2600      	movs	r6, #0
 8002994:	4d0c      	ldr	r5, [pc, #48]	; (80029c8 <__libc_init_array+0x38>)
 8002996:	4c0d      	ldr	r4, [pc, #52]	; (80029cc <__libc_init_array+0x3c>)
 8002998:	1b64      	subs	r4, r4, r5
 800299a:	10a4      	asrs	r4, r4, #2
 800299c:	42a6      	cmp	r6, r4
 800299e:	d109      	bne.n	80029b4 <__libc_init_array+0x24>
 80029a0:	f000 fcaa 	bl	80032f8 <_init>
 80029a4:	2600      	movs	r6, #0
 80029a6:	4d0a      	ldr	r5, [pc, #40]	; (80029d0 <__libc_init_array+0x40>)
 80029a8:	4c0a      	ldr	r4, [pc, #40]	; (80029d4 <__libc_init_array+0x44>)
 80029aa:	1b64      	subs	r4, r4, r5
 80029ac:	10a4      	asrs	r4, r4, #2
 80029ae:	42a6      	cmp	r6, r4
 80029b0:	d105      	bne.n	80029be <__libc_init_array+0x2e>
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
 80029b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b8:	4798      	blx	r3
 80029ba:	3601      	adds	r6, #1
 80029bc:	e7ee      	b.n	800299c <__libc_init_array+0xc>
 80029be:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c2:	4798      	blx	r3
 80029c4:	3601      	adds	r6, #1
 80029c6:	e7f2      	b.n	80029ae <__libc_init_array+0x1e>
 80029c8:	08003414 	.word	0x08003414
 80029cc:	08003414 	.word	0x08003414
 80029d0:	08003414 	.word	0x08003414
 80029d4:	08003418 	.word	0x08003418

080029d8 <memset>:
 80029d8:	4603      	mov	r3, r0
 80029da:	4402      	add	r2, r0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d100      	bne.n	80029e2 <memset+0xa>
 80029e0:	4770      	bx	lr
 80029e2:	f803 1b01 	strb.w	r1, [r3], #1
 80029e6:	e7f9      	b.n	80029dc <memset+0x4>

080029e8 <siprintf>:
 80029e8:	b40e      	push	{r1, r2, r3}
 80029ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029ee:	b500      	push	{lr}
 80029f0:	b09c      	sub	sp, #112	; 0x70
 80029f2:	ab1d      	add	r3, sp, #116	; 0x74
 80029f4:	9002      	str	r0, [sp, #8]
 80029f6:	9006      	str	r0, [sp, #24]
 80029f8:	9107      	str	r1, [sp, #28]
 80029fa:	9104      	str	r1, [sp, #16]
 80029fc:	4808      	ldr	r0, [pc, #32]	; (8002a20 <siprintf+0x38>)
 80029fe:	4909      	ldr	r1, [pc, #36]	; (8002a24 <siprintf+0x3c>)
 8002a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a04:	9105      	str	r1, [sp, #20]
 8002a06:	6800      	ldr	r0, [r0, #0]
 8002a08:	a902      	add	r1, sp, #8
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	f000 f876 	bl	8002afc <_svfiprintf_r>
 8002a10:	2200      	movs	r2, #0
 8002a12:	9b02      	ldr	r3, [sp, #8]
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	b01c      	add	sp, #112	; 0x70
 8002a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a1c:	b003      	add	sp, #12
 8002a1e:	4770      	bx	lr
 8002a20:	2000000c 	.word	0x2000000c
 8002a24:	ffff0208 	.word	0xffff0208

08002a28 <strcat>:
 8002a28:	4602      	mov	r2, r0
 8002a2a:	b510      	push	{r4, lr}
 8002a2c:	7814      	ldrb	r4, [r2, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	3201      	adds	r2, #1
 8002a32:	2c00      	cmp	r4, #0
 8002a34:	d1fa      	bne.n	8002a2c <strcat+0x4>
 8002a36:	3b01      	subs	r3, #1
 8002a38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a40:	2a00      	cmp	r2, #0
 8002a42:	d1f9      	bne.n	8002a38 <strcat+0x10>
 8002a44:	bd10      	pop	{r4, pc}

08002a46 <__ssputs_r>:
 8002a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a4a:	688e      	ldr	r6, [r1, #8]
 8002a4c:	4682      	mov	sl, r0
 8002a4e:	429e      	cmp	r6, r3
 8002a50:	460c      	mov	r4, r1
 8002a52:	4690      	mov	r8, r2
 8002a54:	461f      	mov	r7, r3
 8002a56:	d838      	bhi.n	8002aca <__ssputs_r+0x84>
 8002a58:	898a      	ldrh	r2, [r1, #12]
 8002a5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a5e:	d032      	beq.n	8002ac6 <__ssputs_r+0x80>
 8002a60:	6825      	ldr	r5, [r4, #0]
 8002a62:	6909      	ldr	r1, [r1, #16]
 8002a64:	3301      	adds	r3, #1
 8002a66:	eba5 0901 	sub.w	r9, r5, r1
 8002a6a:	6965      	ldr	r5, [r4, #20]
 8002a6c:	444b      	add	r3, r9
 8002a6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a76:	106d      	asrs	r5, r5, #1
 8002a78:	429d      	cmp	r5, r3
 8002a7a:	bf38      	it	cc
 8002a7c:	461d      	movcc	r5, r3
 8002a7e:	0553      	lsls	r3, r2, #21
 8002a80:	d531      	bpl.n	8002ae6 <__ssputs_r+0xa0>
 8002a82:	4629      	mov	r1, r5
 8002a84:	f000 fb6e 	bl	8003164 <_malloc_r>
 8002a88:	4606      	mov	r6, r0
 8002a8a:	b950      	cbnz	r0, 8002aa2 <__ssputs_r+0x5c>
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a92:	f8ca 3000 	str.w	r3, [sl]
 8002a96:	89a3      	ldrh	r3, [r4, #12]
 8002a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9c:	81a3      	strh	r3, [r4, #12]
 8002a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aa2:	464a      	mov	r2, r9
 8002aa4:	6921      	ldr	r1, [r4, #16]
 8002aa6:	f000 facd 	bl	8003044 <memcpy>
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab4:	81a3      	strh	r3, [r4, #12]
 8002ab6:	6126      	str	r6, [r4, #16]
 8002ab8:	444e      	add	r6, r9
 8002aba:	6026      	str	r6, [r4, #0]
 8002abc:	463e      	mov	r6, r7
 8002abe:	6165      	str	r5, [r4, #20]
 8002ac0:	eba5 0509 	sub.w	r5, r5, r9
 8002ac4:	60a5      	str	r5, [r4, #8]
 8002ac6:	42be      	cmp	r6, r7
 8002ac8:	d900      	bls.n	8002acc <__ssputs_r+0x86>
 8002aca:	463e      	mov	r6, r7
 8002acc:	4632      	mov	r2, r6
 8002ace:	4641      	mov	r1, r8
 8002ad0:	6820      	ldr	r0, [r4, #0]
 8002ad2:	f000 fac5 	bl	8003060 <memmove>
 8002ad6:	68a3      	ldr	r3, [r4, #8]
 8002ad8:	2000      	movs	r0, #0
 8002ada:	1b9b      	subs	r3, r3, r6
 8002adc:	60a3      	str	r3, [r4, #8]
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	4433      	add	r3, r6
 8002ae2:	6023      	str	r3, [r4, #0]
 8002ae4:	e7db      	b.n	8002a9e <__ssputs_r+0x58>
 8002ae6:	462a      	mov	r2, r5
 8002ae8:	f000 fbb0 	bl	800324c <_realloc_r>
 8002aec:	4606      	mov	r6, r0
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d1e1      	bne.n	8002ab6 <__ssputs_r+0x70>
 8002af2:	4650      	mov	r0, sl
 8002af4:	6921      	ldr	r1, [r4, #16]
 8002af6:	f000 facd 	bl	8003094 <_free_r>
 8002afa:	e7c7      	b.n	8002a8c <__ssputs_r+0x46>

08002afc <_svfiprintf_r>:
 8002afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b00:	4698      	mov	r8, r3
 8002b02:	898b      	ldrh	r3, [r1, #12]
 8002b04:	4607      	mov	r7, r0
 8002b06:	061b      	lsls	r3, r3, #24
 8002b08:	460d      	mov	r5, r1
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	b09d      	sub	sp, #116	; 0x74
 8002b0e:	d50e      	bpl.n	8002b2e <_svfiprintf_r+0x32>
 8002b10:	690b      	ldr	r3, [r1, #16]
 8002b12:	b963      	cbnz	r3, 8002b2e <_svfiprintf_r+0x32>
 8002b14:	2140      	movs	r1, #64	; 0x40
 8002b16:	f000 fb25 	bl	8003164 <_malloc_r>
 8002b1a:	6028      	str	r0, [r5, #0]
 8002b1c:	6128      	str	r0, [r5, #16]
 8002b1e:	b920      	cbnz	r0, 8002b2a <_svfiprintf_r+0x2e>
 8002b20:	230c      	movs	r3, #12
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	f04f 30ff 	mov.w	r0, #4294967295
 8002b28:	e0d1      	b.n	8002cce <_svfiprintf_r+0x1d2>
 8002b2a:	2340      	movs	r3, #64	; 0x40
 8002b2c:	616b      	str	r3, [r5, #20]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9309      	str	r3, [sp, #36]	; 0x24
 8002b32:	2320      	movs	r3, #32
 8002b34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b38:	2330      	movs	r3, #48	; 0x30
 8002b3a:	f04f 0901 	mov.w	r9, #1
 8002b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002ce8 <_svfiprintf_r+0x1ec>
 8002b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b4a:	4623      	mov	r3, r4
 8002b4c:	469a      	mov	sl, r3
 8002b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b52:	b10a      	cbz	r2, 8002b58 <_svfiprintf_r+0x5c>
 8002b54:	2a25      	cmp	r2, #37	; 0x25
 8002b56:	d1f9      	bne.n	8002b4c <_svfiprintf_r+0x50>
 8002b58:	ebba 0b04 	subs.w	fp, sl, r4
 8002b5c:	d00b      	beq.n	8002b76 <_svfiprintf_r+0x7a>
 8002b5e:	465b      	mov	r3, fp
 8002b60:	4622      	mov	r2, r4
 8002b62:	4629      	mov	r1, r5
 8002b64:	4638      	mov	r0, r7
 8002b66:	f7ff ff6e 	bl	8002a46 <__ssputs_r>
 8002b6a:	3001      	adds	r0, #1
 8002b6c:	f000 80aa 	beq.w	8002cc4 <_svfiprintf_r+0x1c8>
 8002b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b72:	445a      	add	r2, fp
 8002b74:	9209      	str	r2, [sp, #36]	; 0x24
 8002b76:	f89a 3000 	ldrb.w	r3, [sl]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80a2 	beq.w	8002cc4 <_svfiprintf_r+0x1c8>
 8002b80:	2300      	movs	r3, #0
 8002b82:	f04f 32ff 	mov.w	r2, #4294967295
 8002b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b8a:	f10a 0a01 	add.w	sl, sl, #1
 8002b8e:	9304      	str	r3, [sp, #16]
 8002b90:	9307      	str	r3, [sp, #28]
 8002b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b96:	931a      	str	r3, [sp, #104]	; 0x68
 8002b98:	4654      	mov	r4, sl
 8002b9a:	2205      	movs	r2, #5
 8002b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ba0:	4851      	ldr	r0, [pc, #324]	; (8002ce8 <_svfiprintf_r+0x1ec>)
 8002ba2:	f000 fa41 	bl	8003028 <memchr>
 8002ba6:	9a04      	ldr	r2, [sp, #16]
 8002ba8:	b9d8      	cbnz	r0, 8002be2 <_svfiprintf_r+0xe6>
 8002baa:	06d0      	lsls	r0, r2, #27
 8002bac:	bf44      	itt	mi
 8002bae:	2320      	movmi	r3, #32
 8002bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bb4:	0711      	lsls	r1, r2, #28
 8002bb6:	bf44      	itt	mi
 8002bb8:	232b      	movmi	r3, #43	; 0x2b
 8002bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8002bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8002bc4:	d015      	beq.n	8002bf2 <_svfiprintf_r+0xf6>
 8002bc6:	4654      	mov	r4, sl
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f04f 0c0a 	mov.w	ip, #10
 8002bce:	9a07      	ldr	r2, [sp, #28]
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bd6:	3b30      	subs	r3, #48	; 0x30
 8002bd8:	2b09      	cmp	r3, #9
 8002bda:	d94e      	bls.n	8002c7a <_svfiprintf_r+0x17e>
 8002bdc:	b1b0      	cbz	r0, 8002c0c <_svfiprintf_r+0x110>
 8002bde:	9207      	str	r2, [sp, #28]
 8002be0:	e014      	b.n	8002c0c <_svfiprintf_r+0x110>
 8002be2:	eba0 0308 	sub.w	r3, r0, r8
 8002be6:	fa09 f303 	lsl.w	r3, r9, r3
 8002bea:	4313      	orrs	r3, r2
 8002bec:	46a2      	mov	sl, r4
 8002bee:	9304      	str	r3, [sp, #16]
 8002bf0:	e7d2      	b.n	8002b98 <_svfiprintf_r+0x9c>
 8002bf2:	9b03      	ldr	r3, [sp, #12]
 8002bf4:	1d19      	adds	r1, r3, #4
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	9103      	str	r1, [sp, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bfbb      	ittet	lt
 8002bfe:	425b      	neglt	r3, r3
 8002c00:	f042 0202 	orrlt.w	r2, r2, #2
 8002c04:	9307      	strge	r3, [sp, #28]
 8002c06:	9307      	strlt	r3, [sp, #28]
 8002c08:	bfb8      	it	lt
 8002c0a:	9204      	strlt	r2, [sp, #16]
 8002c0c:	7823      	ldrb	r3, [r4, #0]
 8002c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c10:	d10c      	bne.n	8002c2c <_svfiprintf_r+0x130>
 8002c12:	7863      	ldrb	r3, [r4, #1]
 8002c14:	2b2a      	cmp	r3, #42	; 0x2a
 8002c16:	d135      	bne.n	8002c84 <_svfiprintf_r+0x188>
 8002c18:	9b03      	ldr	r3, [sp, #12]
 8002c1a:	3402      	adds	r4, #2
 8002c1c:	1d1a      	adds	r2, r3, #4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	9203      	str	r2, [sp, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bfb8      	it	lt
 8002c26:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c2a:	9305      	str	r3, [sp, #20]
 8002c2c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002cec <_svfiprintf_r+0x1f0>
 8002c30:	2203      	movs	r2, #3
 8002c32:	4650      	mov	r0, sl
 8002c34:	7821      	ldrb	r1, [r4, #0]
 8002c36:	f000 f9f7 	bl	8003028 <memchr>
 8002c3a:	b140      	cbz	r0, 8002c4e <_svfiprintf_r+0x152>
 8002c3c:	2340      	movs	r3, #64	; 0x40
 8002c3e:	eba0 000a 	sub.w	r0, r0, sl
 8002c42:	fa03 f000 	lsl.w	r0, r3, r0
 8002c46:	9b04      	ldr	r3, [sp, #16]
 8002c48:	3401      	adds	r4, #1
 8002c4a:	4303      	orrs	r3, r0
 8002c4c:	9304      	str	r3, [sp, #16]
 8002c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c52:	2206      	movs	r2, #6
 8002c54:	4826      	ldr	r0, [pc, #152]	; (8002cf0 <_svfiprintf_r+0x1f4>)
 8002c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c5a:	f000 f9e5 	bl	8003028 <memchr>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d038      	beq.n	8002cd4 <_svfiprintf_r+0x1d8>
 8002c62:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <_svfiprintf_r+0x1f8>)
 8002c64:	bb1b      	cbnz	r3, 8002cae <_svfiprintf_r+0x1b2>
 8002c66:	9b03      	ldr	r3, [sp, #12]
 8002c68:	3307      	adds	r3, #7
 8002c6a:	f023 0307 	bic.w	r3, r3, #7
 8002c6e:	3308      	adds	r3, #8
 8002c70:	9303      	str	r3, [sp, #12]
 8002c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c74:	4433      	add	r3, r6
 8002c76:	9309      	str	r3, [sp, #36]	; 0x24
 8002c78:	e767      	b.n	8002b4a <_svfiprintf_r+0x4e>
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c82:	e7a5      	b.n	8002bd0 <_svfiprintf_r+0xd4>
 8002c84:	2300      	movs	r3, #0
 8002c86:	f04f 0c0a 	mov.w	ip, #10
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	3401      	adds	r4, #1
 8002c8e:	9305      	str	r3, [sp, #20]
 8002c90:	4620      	mov	r0, r4
 8002c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c96:	3a30      	subs	r2, #48	; 0x30
 8002c98:	2a09      	cmp	r2, #9
 8002c9a:	d903      	bls.n	8002ca4 <_svfiprintf_r+0x1a8>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0c5      	beq.n	8002c2c <_svfiprintf_r+0x130>
 8002ca0:	9105      	str	r1, [sp, #20]
 8002ca2:	e7c3      	b.n	8002c2c <_svfiprintf_r+0x130>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cac:	e7f0      	b.n	8002c90 <_svfiprintf_r+0x194>
 8002cae:	ab03      	add	r3, sp, #12
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	462a      	mov	r2, r5
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <_svfiprintf_r+0x1fc>)
 8002cb8:	a904      	add	r1, sp, #16
 8002cba:	f3af 8000 	nop.w
 8002cbe:	1c42      	adds	r2, r0, #1
 8002cc0:	4606      	mov	r6, r0
 8002cc2:	d1d6      	bne.n	8002c72 <_svfiprintf_r+0x176>
 8002cc4:	89ab      	ldrh	r3, [r5, #12]
 8002cc6:	065b      	lsls	r3, r3, #25
 8002cc8:	f53f af2c 	bmi.w	8002b24 <_svfiprintf_r+0x28>
 8002ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cce:	b01d      	add	sp, #116	; 0x74
 8002cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cd4:	ab03      	add	r3, sp, #12
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	462a      	mov	r2, r5
 8002cda:	4638      	mov	r0, r7
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <_svfiprintf_r+0x1fc>)
 8002cde:	a904      	add	r1, sp, #16
 8002ce0:	f000 f87c 	bl	8002ddc <_printf_i>
 8002ce4:	e7eb      	b.n	8002cbe <_svfiprintf_r+0x1c2>
 8002ce6:	bf00      	nop
 8002ce8:	080033e0 	.word	0x080033e0
 8002cec:	080033e6 	.word	0x080033e6
 8002cf0:	080033ea 	.word	0x080033ea
 8002cf4:	00000000 	.word	0x00000000
 8002cf8:	08002a47 	.word	0x08002a47

08002cfc <_printf_common>:
 8002cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d00:	4616      	mov	r6, r2
 8002d02:	4699      	mov	r9, r3
 8002d04:	688a      	ldr	r2, [r1, #8]
 8002d06:	690b      	ldr	r3, [r1, #16]
 8002d08:	4607      	mov	r7, r0
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	bfb8      	it	lt
 8002d0e:	4613      	movlt	r3, r2
 8002d10:	6033      	str	r3, [r6, #0]
 8002d12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d16:	460c      	mov	r4, r1
 8002d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d1c:	b10a      	cbz	r2, 8002d22 <_printf_common+0x26>
 8002d1e:	3301      	adds	r3, #1
 8002d20:	6033      	str	r3, [r6, #0]
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	0699      	lsls	r1, r3, #26
 8002d26:	bf42      	ittt	mi
 8002d28:	6833      	ldrmi	r3, [r6, #0]
 8002d2a:	3302      	addmi	r3, #2
 8002d2c:	6033      	strmi	r3, [r6, #0]
 8002d2e:	6825      	ldr	r5, [r4, #0]
 8002d30:	f015 0506 	ands.w	r5, r5, #6
 8002d34:	d106      	bne.n	8002d44 <_printf_common+0x48>
 8002d36:	f104 0a19 	add.w	sl, r4, #25
 8002d3a:	68e3      	ldr	r3, [r4, #12]
 8002d3c:	6832      	ldr	r2, [r6, #0]
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	42ab      	cmp	r3, r5
 8002d42:	dc28      	bgt.n	8002d96 <_printf_common+0x9a>
 8002d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d48:	1e13      	subs	r3, r2, #0
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	bf18      	it	ne
 8002d4e:	2301      	movne	r3, #1
 8002d50:	0692      	lsls	r2, r2, #26
 8002d52:	d42d      	bmi.n	8002db0 <_printf_common+0xb4>
 8002d54:	4649      	mov	r1, r9
 8002d56:	4638      	mov	r0, r7
 8002d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d5c:	47c0      	blx	r8
 8002d5e:	3001      	adds	r0, #1
 8002d60:	d020      	beq.n	8002da4 <_printf_common+0xa8>
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	68e5      	ldr	r5, [r4, #12]
 8002d66:	f003 0306 	and.w	r3, r3, #6
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	bf18      	it	ne
 8002d6e:	2500      	movne	r5, #0
 8002d70:	6832      	ldr	r2, [r6, #0]
 8002d72:	f04f 0600 	mov.w	r6, #0
 8002d76:	68a3      	ldr	r3, [r4, #8]
 8002d78:	bf08      	it	eq
 8002d7a:	1aad      	subeq	r5, r5, r2
 8002d7c:	6922      	ldr	r2, [r4, #16]
 8002d7e:	bf08      	it	eq
 8002d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d84:	4293      	cmp	r3, r2
 8002d86:	bfc4      	itt	gt
 8002d88:	1a9b      	subgt	r3, r3, r2
 8002d8a:	18ed      	addgt	r5, r5, r3
 8002d8c:	341a      	adds	r4, #26
 8002d8e:	42b5      	cmp	r5, r6
 8002d90:	d11a      	bne.n	8002dc8 <_printf_common+0xcc>
 8002d92:	2000      	movs	r0, #0
 8002d94:	e008      	b.n	8002da8 <_printf_common+0xac>
 8002d96:	2301      	movs	r3, #1
 8002d98:	4652      	mov	r2, sl
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	4638      	mov	r0, r7
 8002d9e:	47c0      	blx	r8
 8002da0:	3001      	adds	r0, #1
 8002da2:	d103      	bne.n	8002dac <_printf_common+0xb0>
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dac:	3501      	adds	r5, #1
 8002dae:	e7c4      	b.n	8002d3a <_printf_common+0x3e>
 8002db0:	2030      	movs	r0, #48	; 0x30
 8002db2:	18e1      	adds	r1, r4, r3
 8002db4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002dbe:	4422      	add	r2, r4
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dc6:	e7c5      	b.n	8002d54 <_printf_common+0x58>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	4622      	mov	r2, r4
 8002dcc:	4649      	mov	r1, r9
 8002dce:	4638      	mov	r0, r7
 8002dd0:	47c0      	blx	r8
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	d0e6      	beq.n	8002da4 <_printf_common+0xa8>
 8002dd6:	3601      	adds	r6, #1
 8002dd8:	e7d9      	b.n	8002d8e <_printf_common+0x92>
	...

08002ddc <_printf_i>:
 8002ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002de0:	7e0f      	ldrb	r7, [r1, #24]
 8002de2:	4691      	mov	r9, r2
 8002de4:	2f78      	cmp	r7, #120	; 0x78
 8002de6:	4680      	mov	r8, r0
 8002de8:	460c      	mov	r4, r1
 8002dea:	469a      	mov	sl, r3
 8002dec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002df2:	d807      	bhi.n	8002e04 <_printf_i+0x28>
 8002df4:	2f62      	cmp	r7, #98	; 0x62
 8002df6:	d80a      	bhi.n	8002e0e <_printf_i+0x32>
 8002df8:	2f00      	cmp	r7, #0
 8002dfa:	f000 80d9 	beq.w	8002fb0 <_printf_i+0x1d4>
 8002dfe:	2f58      	cmp	r7, #88	; 0x58
 8002e00:	f000 80a4 	beq.w	8002f4c <_printf_i+0x170>
 8002e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e0c:	e03a      	b.n	8002e84 <_printf_i+0xa8>
 8002e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e12:	2b15      	cmp	r3, #21
 8002e14:	d8f6      	bhi.n	8002e04 <_printf_i+0x28>
 8002e16:	a101      	add	r1, pc, #4	; (adr r1, 8002e1c <_printf_i+0x40>)
 8002e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e1c:	08002e75 	.word	0x08002e75
 8002e20:	08002e89 	.word	0x08002e89
 8002e24:	08002e05 	.word	0x08002e05
 8002e28:	08002e05 	.word	0x08002e05
 8002e2c:	08002e05 	.word	0x08002e05
 8002e30:	08002e05 	.word	0x08002e05
 8002e34:	08002e89 	.word	0x08002e89
 8002e38:	08002e05 	.word	0x08002e05
 8002e3c:	08002e05 	.word	0x08002e05
 8002e40:	08002e05 	.word	0x08002e05
 8002e44:	08002e05 	.word	0x08002e05
 8002e48:	08002f97 	.word	0x08002f97
 8002e4c:	08002eb9 	.word	0x08002eb9
 8002e50:	08002f79 	.word	0x08002f79
 8002e54:	08002e05 	.word	0x08002e05
 8002e58:	08002e05 	.word	0x08002e05
 8002e5c:	08002fb9 	.word	0x08002fb9
 8002e60:	08002e05 	.word	0x08002e05
 8002e64:	08002eb9 	.word	0x08002eb9
 8002e68:	08002e05 	.word	0x08002e05
 8002e6c:	08002e05 	.word	0x08002e05
 8002e70:	08002f81 	.word	0x08002f81
 8002e74:	682b      	ldr	r3, [r5, #0]
 8002e76:	1d1a      	adds	r2, r3, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	602a      	str	r2, [r5, #0]
 8002e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0a4      	b.n	8002fd2 <_printf_i+0x1f6>
 8002e88:	6820      	ldr	r0, [r4, #0]
 8002e8a:	6829      	ldr	r1, [r5, #0]
 8002e8c:	0606      	lsls	r6, r0, #24
 8002e8e:	f101 0304 	add.w	r3, r1, #4
 8002e92:	d50a      	bpl.n	8002eaa <_printf_i+0xce>
 8002e94:	680e      	ldr	r6, [r1, #0]
 8002e96:	602b      	str	r3, [r5, #0]
 8002e98:	2e00      	cmp	r6, #0
 8002e9a:	da03      	bge.n	8002ea4 <_printf_i+0xc8>
 8002e9c:	232d      	movs	r3, #45	; 0x2d
 8002e9e:	4276      	negs	r6, r6
 8002ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ea4:	230a      	movs	r3, #10
 8002ea6:	485e      	ldr	r0, [pc, #376]	; (8003020 <_printf_i+0x244>)
 8002ea8:	e019      	b.n	8002ede <_printf_i+0x102>
 8002eaa:	680e      	ldr	r6, [r1, #0]
 8002eac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002eb0:	602b      	str	r3, [r5, #0]
 8002eb2:	bf18      	it	ne
 8002eb4:	b236      	sxthne	r6, r6
 8002eb6:	e7ef      	b.n	8002e98 <_printf_i+0xbc>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	6820      	ldr	r0, [r4, #0]
 8002ebc:	1d19      	adds	r1, r3, #4
 8002ebe:	6029      	str	r1, [r5, #0]
 8002ec0:	0601      	lsls	r1, r0, #24
 8002ec2:	d501      	bpl.n	8002ec8 <_printf_i+0xec>
 8002ec4:	681e      	ldr	r6, [r3, #0]
 8002ec6:	e002      	b.n	8002ece <_printf_i+0xf2>
 8002ec8:	0646      	lsls	r6, r0, #25
 8002eca:	d5fb      	bpl.n	8002ec4 <_printf_i+0xe8>
 8002ecc:	881e      	ldrh	r6, [r3, #0]
 8002ece:	2f6f      	cmp	r7, #111	; 0x6f
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2308      	moveq	r3, #8
 8002ed4:	230a      	movne	r3, #10
 8002ed6:	4852      	ldr	r0, [pc, #328]	; (8003020 <_printf_i+0x244>)
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ede:	6865      	ldr	r5, [r4, #4]
 8002ee0:	2d00      	cmp	r5, #0
 8002ee2:	bfa8      	it	ge
 8002ee4:	6821      	ldrge	r1, [r4, #0]
 8002ee6:	60a5      	str	r5, [r4, #8]
 8002ee8:	bfa4      	itt	ge
 8002eea:	f021 0104 	bicge.w	r1, r1, #4
 8002eee:	6021      	strge	r1, [r4, #0]
 8002ef0:	b90e      	cbnz	r6, 8002ef6 <_printf_i+0x11a>
 8002ef2:	2d00      	cmp	r5, #0
 8002ef4:	d04d      	beq.n	8002f92 <_printf_i+0x1b6>
 8002ef6:	4615      	mov	r5, r2
 8002ef8:	fbb6 f1f3 	udiv	r1, r6, r3
 8002efc:	fb03 6711 	mls	r7, r3, r1, r6
 8002f00:	5dc7      	ldrb	r7, [r0, r7]
 8002f02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f06:	4637      	mov	r7, r6
 8002f08:	42bb      	cmp	r3, r7
 8002f0a:	460e      	mov	r6, r1
 8002f0c:	d9f4      	bls.n	8002ef8 <_printf_i+0x11c>
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d10b      	bne.n	8002f2a <_printf_i+0x14e>
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	07de      	lsls	r6, r3, #31
 8002f16:	d508      	bpl.n	8002f2a <_printf_i+0x14e>
 8002f18:	6923      	ldr	r3, [r4, #16]
 8002f1a:	6861      	ldr	r1, [r4, #4]
 8002f1c:	4299      	cmp	r1, r3
 8002f1e:	bfde      	ittt	le
 8002f20:	2330      	movle	r3, #48	; 0x30
 8002f22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f2a:	1b52      	subs	r2, r2, r5
 8002f2c:	6122      	str	r2, [r4, #16]
 8002f2e:	464b      	mov	r3, r9
 8002f30:	4621      	mov	r1, r4
 8002f32:	4640      	mov	r0, r8
 8002f34:	f8cd a000 	str.w	sl, [sp]
 8002f38:	aa03      	add	r2, sp, #12
 8002f3a:	f7ff fedf 	bl	8002cfc <_printf_common>
 8002f3e:	3001      	adds	r0, #1
 8002f40:	d14c      	bne.n	8002fdc <_printf_i+0x200>
 8002f42:	f04f 30ff 	mov.w	r0, #4294967295
 8002f46:	b004      	add	sp, #16
 8002f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f4c:	4834      	ldr	r0, [pc, #208]	; (8003020 <_printf_i+0x244>)
 8002f4e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002f52:	6829      	ldr	r1, [r5, #0]
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f5a:	6029      	str	r1, [r5, #0]
 8002f5c:	061d      	lsls	r5, r3, #24
 8002f5e:	d514      	bpl.n	8002f8a <_printf_i+0x1ae>
 8002f60:	07df      	lsls	r7, r3, #31
 8002f62:	bf44      	itt	mi
 8002f64:	f043 0320 	orrmi.w	r3, r3, #32
 8002f68:	6023      	strmi	r3, [r4, #0]
 8002f6a:	b91e      	cbnz	r6, 8002f74 <_printf_i+0x198>
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	f023 0320 	bic.w	r3, r3, #32
 8002f72:	6023      	str	r3, [r4, #0]
 8002f74:	2310      	movs	r3, #16
 8002f76:	e7af      	b.n	8002ed8 <_printf_i+0xfc>
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	f043 0320 	orr.w	r3, r3, #32
 8002f7e:	6023      	str	r3, [r4, #0]
 8002f80:	2378      	movs	r3, #120	; 0x78
 8002f82:	4828      	ldr	r0, [pc, #160]	; (8003024 <_printf_i+0x248>)
 8002f84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f88:	e7e3      	b.n	8002f52 <_printf_i+0x176>
 8002f8a:	0659      	lsls	r1, r3, #25
 8002f8c:	bf48      	it	mi
 8002f8e:	b2b6      	uxthmi	r6, r6
 8002f90:	e7e6      	b.n	8002f60 <_printf_i+0x184>
 8002f92:	4615      	mov	r5, r2
 8002f94:	e7bb      	b.n	8002f0e <_printf_i+0x132>
 8002f96:	682b      	ldr	r3, [r5, #0]
 8002f98:	6826      	ldr	r6, [r4, #0]
 8002f9a:	1d18      	adds	r0, r3, #4
 8002f9c:	6961      	ldr	r1, [r4, #20]
 8002f9e:	6028      	str	r0, [r5, #0]
 8002fa0:	0635      	lsls	r5, r6, #24
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	d501      	bpl.n	8002faa <_printf_i+0x1ce>
 8002fa6:	6019      	str	r1, [r3, #0]
 8002fa8:	e002      	b.n	8002fb0 <_printf_i+0x1d4>
 8002faa:	0670      	lsls	r0, r6, #25
 8002fac:	d5fb      	bpl.n	8002fa6 <_printf_i+0x1ca>
 8002fae:	8019      	strh	r1, [r3, #0]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	4615      	mov	r5, r2
 8002fb4:	6123      	str	r3, [r4, #16]
 8002fb6:	e7ba      	b.n	8002f2e <_printf_i+0x152>
 8002fb8:	682b      	ldr	r3, [r5, #0]
 8002fba:	2100      	movs	r1, #0
 8002fbc:	1d1a      	adds	r2, r3, #4
 8002fbe:	602a      	str	r2, [r5, #0]
 8002fc0:	681d      	ldr	r5, [r3, #0]
 8002fc2:	6862      	ldr	r2, [r4, #4]
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f000 f82f 	bl	8003028 <memchr>
 8002fca:	b108      	cbz	r0, 8002fd0 <_printf_i+0x1f4>
 8002fcc:	1b40      	subs	r0, r0, r5
 8002fce:	6060      	str	r0, [r4, #4]
 8002fd0:	6863      	ldr	r3, [r4, #4]
 8002fd2:	6123      	str	r3, [r4, #16]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fda:	e7a8      	b.n	8002f2e <_printf_i+0x152>
 8002fdc:	462a      	mov	r2, r5
 8002fde:	4649      	mov	r1, r9
 8002fe0:	4640      	mov	r0, r8
 8002fe2:	6923      	ldr	r3, [r4, #16]
 8002fe4:	47d0      	blx	sl
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	d0ab      	beq.n	8002f42 <_printf_i+0x166>
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	079b      	lsls	r3, r3, #30
 8002fee:	d413      	bmi.n	8003018 <_printf_i+0x23c>
 8002ff0:	68e0      	ldr	r0, [r4, #12]
 8002ff2:	9b03      	ldr	r3, [sp, #12]
 8002ff4:	4298      	cmp	r0, r3
 8002ff6:	bfb8      	it	lt
 8002ff8:	4618      	movlt	r0, r3
 8002ffa:	e7a4      	b.n	8002f46 <_printf_i+0x16a>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	4632      	mov	r2, r6
 8003000:	4649      	mov	r1, r9
 8003002:	4640      	mov	r0, r8
 8003004:	47d0      	blx	sl
 8003006:	3001      	adds	r0, #1
 8003008:	d09b      	beq.n	8002f42 <_printf_i+0x166>
 800300a:	3501      	adds	r5, #1
 800300c:	68e3      	ldr	r3, [r4, #12]
 800300e:	9903      	ldr	r1, [sp, #12]
 8003010:	1a5b      	subs	r3, r3, r1
 8003012:	42ab      	cmp	r3, r5
 8003014:	dcf2      	bgt.n	8002ffc <_printf_i+0x220>
 8003016:	e7eb      	b.n	8002ff0 <_printf_i+0x214>
 8003018:	2500      	movs	r5, #0
 800301a:	f104 0619 	add.w	r6, r4, #25
 800301e:	e7f5      	b.n	800300c <_printf_i+0x230>
 8003020:	080033f1 	.word	0x080033f1
 8003024:	08003402 	.word	0x08003402

08003028 <memchr>:
 8003028:	4603      	mov	r3, r0
 800302a:	b510      	push	{r4, lr}
 800302c:	b2c9      	uxtb	r1, r1
 800302e:	4402      	add	r2, r0
 8003030:	4293      	cmp	r3, r2
 8003032:	4618      	mov	r0, r3
 8003034:	d101      	bne.n	800303a <memchr+0x12>
 8003036:	2000      	movs	r0, #0
 8003038:	e003      	b.n	8003042 <memchr+0x1a>
 800303a:	7804      	ldrb	r4, [r0, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	428c      	cmp	r4, r1
 8003040:	d1f6      	bne.n	8003030 <memchr+0x8>
 8003042:	bd10      	pop	{r4, pc}

08003044 <memcpy>:
 8003044:	440a      	add	r2, r1
 8003046:	4291      	cmp	r1, r2
 8003048:	f100 33ff 	add.w	r3, r0, #4294967295
 800304c:	d100      	bne.n	8003050 <memcpy+0xc>
 800304e:	4770      	bx	lr
 8003050:	b510      	push	{r4, lr}
 8003052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003056:	4291      	cmp	r1, r2
 8003058:	f803 4f01 	strb.w	r4, [r3, #1]!
 800305c:	d1f9      	bne.n	8003052 <memcpy+0xe>
 800305e:	bd10      	pop	{r4, pc}

08003060 <memmove>:
 8003060:	4288      	cmp	r0, r1
 8003062:	b510      	push	{r4, lr}
 8003064:	eb01 0402 	add.w	r4, r1, r2
 8003068:	d902      	bls.n	8003070 <memmove+0x10>
 800306a:	4284      	cmp	r4, r0
 800306c:	4623      	mov	r3, r4
 800306e:	d807      	bhi.n	8003080 <memmove+0x20>
 8003070:	1e43      	subs	r3, r0, #1
 8003072:	42a1      	cmp	r1, r4
 8003074:	d008      	beq.n	8003088 <memmove+0x28>
 8003076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800307a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800307e:	e7f8      	b.n	8003072 <memmove+0x12>
 8003080:	4601      	mov	r1, r0
 8003082:	4402      	add	r2, r0
 8003084:	428a      	cmp	r2, r1
 8003086:	d100      	bne.n	800308a <memmove+0x2a>
 8003088:	bd10      	pop	{r4, pc}
 800308a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800308e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003092:	e7f7      	b.n	8003084 <memmove+0x24>

08003094 <_free_r>:
 8003094:	b538      	push	{r3, r4, r5, lr}
 8003096:	4605      	mov	r5, r0
 8003098:	2900      	cmp	r1, #0
 800309a:	d040      	beq.n	800311e <_free_r+0x8a>
 800309c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030a0:	1f0c      	subs	r4, r1, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bfb8      	it	lt
 80030a6:	18e4      	addlt	r4, r4, r3
 80030a8:	f000 f910 	bl	80032cc <__malloc_lock>
 80030ac:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <_free_r+0x8c>)
 80030ae:	6813      	ldr	r3, [r2, #0]
 80030b0:	b933      	cbnz	r3, 80030c0 <_free_r+0x2c>
 80030b2:	6063      	str	r3, [r4, #4]
 80030b4:	6014      	str	r4, [r2, #0]
 80030b6:	4628      	mov	r0, r5
 80030b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030bc:	f000 b90c 	b.w	80032d8 <__malloc_unlock>
 80030c0:	42a3      	cmp	r3, r4
 80030c2:	d908      	bls.n	80030d6 <_free_r+0x42>
 80030c4:	6820      	ldr	r0, [r4, #0]
 80030c6:	1821      	adds	r1, r4, r0
 80030c8:	428b      	cmp	r3, r1
 80030ca:	bf01      	itttt	eq
 80030cc:	6819      	ldreq	r1, [r3, #0]
 80030ce:	685b      	ldreq	r3, [r3, #4]
 80030d0:	1809      	addeq	r1, r1, r0
 80030d2:	6021      	streq	r1, [r4, #0]
 80030d4:	e7ed      	b.n	80030b2 <_free_r+0x1e>
 80030d6:	461a      	mov	r2, r3
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	b10b      	cbz	r3, 80030e0 <_free_r+0x4c>
 80030dc:	42a3      	cmp	r3, r4
 80030de:	d9fa      	bls.n	80030d6 <_free_r+0x42>
 80030e0:	6811      	ldr	r1, [r2, #0]
 80030e2:	1850      	adds	r0, r2, r1
 80030e4:	42a0      	cmp	r0, r4
 80030e6:	d10b      	bne.n	8003100 <_free_r+0x6c>
 80030e8:	6820      	ldr	r0, [r4, #0]
 80030ea:	4401      	add	r1, r0
 80030ec:	1850      	adds	r0, r2, r1
 80030ee:	4283      	cmp	r3, r0
 80030f0:	6011      	str	r1, [r2, #0]
 80030f2:	d1e0      	bne.n	80030b6 <_free_r+0x22>
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4401      	add	r1, r0
 80030fa:	6011      	str	r1, [r2, #0]
 80030fc:	6053      	str	r3, [r2, #4]
 80030fe:	e7da      	b.n	80030b6 <_free_r+0x22>
 8003100:	d902      	bls.n	8003108 <_free_r+0x74>
 8003102:	230c      	movs	r3, #12
 8003104:	602b      	str	r3, [r5, #0]
 8003106:	e7d6      	b.n	80030b6 <_free_r+0x22>
 8003108:	6820      	ldr	r0, [r4, #0]
 800310a:	1821      	adds	r1, r4, r0
 800310c:	428b      	cmp	r3, r1
 800310e:	bf01      	itttt	eq
 8003110:	6819      	ldreq	r1, [r3, #0]
 8003112:	685b      	ldreq	r3, [r3, #4]
 8003114:	1809      	addeq	r1, r1, r0
 8003116:	6021      	streq	r1, [r4, #0]
 8003118:	6063      	str	r3, [r4, #4]
 800311a:	6054      	str	r4, [r2, #4]
 800311c:	e7cb      	b.n	80030b6 <_free_r+0x22>
 800311e:	bd38      	pop	{r3, r4, r5, pc}
 8003120:	200000ec 	.word	0x200000ec

08003124 <sbrk_aligned>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	4e0e      	ldr	r6, [pc, #56]	; (8003160 <sbrk_aligned+0x3c>)
 8003128:	460c      	mov	r4, r1
 800312a:	6831      	ldr	r1, [r6, #0]
 800312c:	4605      	mov	r5, r0
 800312e:	b911      	cbnz	r1, 8003136 <sbrk_aligned+0x12>
 8003130:	f000 f8bc 	bl	80032ac <_sbrk_r>
 8003134:	6030      	str	r0, [r6, #0]
 8003136:	4621      	mov	r1, r4
 8003138:	4628      	mov	r0, r5
 800313a:	f000 f8b7 	bl	80032ac <_sbrk_r>
 800313e:	1c43      	adds	r3, r0, #1
 8003140:	d00a      	beq.n	8003158 <sbrk_aligned+0x34>
 8003142:	1cc4      	adds	r4, r0, #3
 8003144:	f024 0403 	bic.w	r4, r4, #3
 8003148:	42a0      	cmp	r0, r4
 800314a:	d007      	beq.n	800315c <sbrk_aligned+0x38>
 800314c:	1a21      	subs	r1, r4, r0
 800314e:	4628      	mov	r0, r5
 8003150:	f000 f8ac 	bl	80032ac <_sbrk_r>
 8003154:	3001      	adds	r0, #1
 8003156:	d101      	bne.n	800315c <sbrk_aligned+0x38>
 8003158:	f04f 34ff 	mov.w	r4, #4294967295
 800315c:	4620      	mov	r0, r4
 800315e:	bd70      	pop	{r4, r5, r6, pc}
 8003160:	200000f0 	.word	0x200000f0

08003164 <_malloc_r>:
 8003164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003168:	1ccd      	adds	r5, r1, #3
 800316a:	f025 0503 	bic.w	r5, r5, #3
 800316e:	3508      	adds	r5, #8
 8003170:	2d0c      	cmp	r5, #12
 8003172:	bf38      	it	cc
 8003174:	250c      	movcc	r5, #12
 8003176:	2d00      	cmp	r5, #0
 8003178:	4607      	mov	r7, r0
 800317a:	db01      	blt.n	8003180 <_malloc_r+0x1c>
 800317c:	42a9      	cmp	r1, r5
 800317e:	d905      	bls.n	800318c <_malloc_r+0x28>
 8003180:	230c      	movs	r3, #12
 8003182:	2600      	movs	r6, #0
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4630      	mov	r0, r6
 8003188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800318c:	4e2e      	ldr	r6, [pc, #184]	; (8003248 <_malloc_r+0xe4>)
 800318e:	f000 f89d 	bl	80032cc <__malloc_lock>
 8003192:	6833      	ldr	r3, [r6, #0]
 8003194:	461c      	mov	r4, r3
 8003196:	bb34      	cbnz	r4, 80031e6 <_malloc_r+0x82>
 8003198:	4629      	mov	r1, r5
 800319a:	4638      	mov	r0, r7
 800319c:	f7ff ffc2 	bl	8003124 <sbrk_aligned>
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	4604      	mov	r4, r0
 80031a4:	d14d      	bne.n	8003242 <_malloc_r+0xde>
 80031a6:	6834      	ldr	r4, [r6, #0]
 80031a8:	4626      	mov	r6, r4
 80031aa:	2e00      	cmp	r6, #0
 80031ac:	d140      	bne.n	8003230 <_malloc_r+0xcc>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	4631      	mov	r1, r6
 80031b2:	4638      	mov	r0, r7
 80031b4:	eb04 0803 	add.w	r8, r4, r3
 80031b8:	f000 f878 	bl	80032ac <_sbrk_r>
 80031bc:	4580      	cmp	r8, r0
 80031be:	d13a      	bne.n	8003236 <_malloc_r+0xd2>
 80031c0:	6821      	ldr	r1, [r4, #0]
 80031c2:	3503      	adds	r5, #3
 80031c4:	1a6d      	subs	r5, r5, r1
 80031c6:	f025 0503 	bic.w	r5, r5, #3
 80031ca:	3508      	adds	r5, #8
 80031cc:	2d0c      	cmp	r5, #12
 80031ce:	bf38      	it	cc
 80031d0:	250c      	movcc	r5, #12
 80031d2:	4638      	mov	r0, r7
 80031d4:	4629      	mov	r1, r5
 80031d6:	f7ff ffa5 	bl	8003124 <sbrk_aligned>
 80031da:	3001      	adds	r0, #1
 80031dc:	d02b      	beq.n	8003236 <_malloc_r+0xd2>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	442b      	add	r3, r5
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	e00e      	b.n	8003204 <_malloc_r+0xa0>
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	1b52      	subs	r2, r2, r5
 80031ea:	d41e      	bmi.n	800322a <_malloc_r+0xc6>
 80031ec:	2a0b      	cmp	r2, #11
 80031ee:	d916      	bls.n	800321e <_malloc_r+0xba>
 80031f0:	1961      	adds	r1, r4, r5
 80031f2:	42a3      	cmp	r3, r4
 80031f4:	6025      	str	r5, [r4, #0]
 80031f6:	bf18      	it	ne
 80031f8:	6059      	strne	r1, [r3, #4]
 80031fa:	6863      	ldr	r3, [r4, #4]
 80031fc:	bf08      	it	eq
 80031fe:	6031      	streq	r1, [r6, #0]
 8003200:	5162      	str	r2, [r4, r5]
 8003202:	604b      	str	r3, [r1, #4]
 8003204:	4638      	mov	r0, r7
 8003206:	f104 060b 	add.w	r6, r4, #11
 800320a:	f000 f865 	bl	80032d8 <__malloc_unlock>
 800320e:	f026 0607 	bic.w	r6, r6, #7
 8003212:	1d23      	adds	r3, r4, #4
 8003214:	1af2      	subs	r2, r6, r3
 8003216:	d0b6      	beq.n	8003186 <_malloc_r+0x22>
 8003218:	1b9b      	subs	r3, r3, r6
 800321a:	50a3      	str	r3, [r4, r2]
 800321c:	e7b3      	b.n	8003186 <_malloc_r+0x22>
 800321e:	6862      	ldr	r2, [r4, #4]
 8003220:	42a3      	cmp	r3, r4
 8003222:	bf0c      	ite	eq
 8003224:	6032      	streq	r2, [r6, #0]
 8003226:	605a      	strne	r2, [r3, #4]
 8003228:	e7ec      	b.n	8003204 <_malloc_r+0xa0>
 800322a:	4623      	mov	r3, r4
 800322c:	6864      	ldr	r4, [r4, #4]
 800322e:	e7b2      	b.n	8003196 <_malloc_r+0x32>
 8003230:	4634      	mov	r4, r6
 8003232:	6876      	ldr	r6, [r6, #4]
 8003234:	e7b9      	b.n	80031aa <_malloc_r+0x46>
 8003236:	230c      	movs	r3, #12
 8003238:	4638      	mov	r0, r7
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	f000 f84c 	bl	80032d8 <__malloc_unlock>
 8003240:	e7a1      	b.n	8003186 <_malloc_r+0x22>
 8003242:	6025      	str	r5, [r4, #0]
 8003244:	e7de      	b.n	8003204 <_malloc_r+0xa0>
 8003246:	bf00      	nop
 8003248:	200000ec 	.word	0x200000ec

0800324c <_realloc_r>:
 800324c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003250:	4680      	mov	r8, r0
 8003252:	4614      	mov	r4, r2
 8003254:	460e      	mov	r6, r1
 8003256:	b921      	cbnz	r1, 8003262 <_realloc_r+0x16>
 8003258:	4611      	mov	r1, r2
 800325a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800325e:	f7ff bf81 	b.w	8003164 <_malloc_r>
 8003262:	b92a      	cbnz	r2, 8003270 <_realloc_r+0x24>
 8003264:	f7ff ff16 	bl	8003094 <_free_r>
 8003268:	4625      	mov	r5, r4
 800326a:	4628      	mov	r0, r5
 800326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003270:	f000 f838 	bl	80032e4 <_malloc_usable_size_r>
 8003274:	4284      	cmp	r4, r0
 8003276:	4607      	mov	r7, r0
 8003278:	d802      	bhi.n	8003280 <_realloc_r+0x34>
 800327a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800327e:	d812      	bhi.n	80032a6 <_realloc_r+0x5a>
 8003280:	4621      	mov	r1, r4
 8003282:	4640      	mov	r0, r8
 8003284:	f7ff ff6e 	bl	8003164 <_malloc_r>
 8003288:	4605      	mov	r5, r0
 800328a:	2800      	cmp	r0, #0
 800328c:	d0ed      	beq.n	800326a <_realloc_r+0x1e>
 800328e:	42bc      	cmp	r4, r7
 8003290:	4622      	mov	r2, r4
 8003292:	4631      	mov	r1, r6
 8003294:	bf28      	it	cs
 8003296:	463a      	movcs	r2, r7
 8003298:	f7ff fed4 	bl	8003044 <memcpy>
 800329c:	4631      	mov	r1, r6
 800329e:	4640      	mov	r0, r8
 80032a0:	f7ff fef8 	bl	8003094 <_free_r>
 80032a4:	e7e1      	b.n	800326a <_realloc_r+0x1e>
 80032a6:	4635      	mov	r5, r6
 80032a8:	e7df      	b.n	800326a <_realloc_r+0x1e>
	...

080032ac <_sbrk_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	2300      	movs	r3, #0
 80032b0:	4d05      	ldr	r5, [pc, #20]	; (80032c8 <_sbrk_r+0x1c>)
 80032b2:	4604      	mov	r4, r0
 80032b4:	4608      	mov	r0, r1
 80032b6:	602b      	str	r3, [r5, #0]
 80032b8:	f7fd fa42 	bl	8000740 <_sbrk>
 80032bc:	1c43      	adds	r3, r0, #1
 80032be:	d102      	bne.n	80032c6 <_sbrk_r+0x1a>
 80032c0:	682b      	ldr	r3, [r5, #0]
 80032c2:	b103      	cbz	r3, 80032c6 <_sbrk_r+0x1a>
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	bd38      	pop	{r3, r4, r5, pc}
 80032c8:	200000f4 	.word	0x200000f4

080032cc <__malloc_lock>:
 80032cc:	4801      	ldr	r0, [pc, #4]	; (80032d4 <__malloc_lock+0x8>)
 80032ce:	f000 b811 	b.w	80032f4 <__retarget_lock_acquire_recursive>
 80032d2:	bf00      	nop
 80032d4:	200000f8 	.word	0x200000f8

080032d8 <__malloc_unlock>:
 80032d8:	4801      	ldr	r0, [pc, #4]	; (80032e0 <__malloc_unlock+0x8>)
 80032da:	f000 b80c 	b.w	80032f6 <__retarget_lock_release_recursive>
 80032de:	bf00      	nop
 80032e0:	200000f8 	.word	0x200000f8

080032e4 <_malloc_usable_size_r>:
 80032e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032e8:	1f18      	subs	r0, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bfbc      	itt	lt
 80032ee:	580b      	ldrlt	r3, [r1, r0]
 80032f0:	18c0      	addlt	r0, r0, r3
 80032f2:	4770      	bx	lr

080032f4 <__retarget_lock_acquire_recursive>:
 80032f4:	4770      	bx	lr

080032f6 <__retarget_lock_release_recursive>:
 80032f6:	4770      	bx	lr

080032f8 <_init>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	bf00      	nop
 80032fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fe:	bc08      	pop	{r3}
 8003300:	469e      	mov	lr, r3
 8003302:	4770      	bx	lr

08003304 <_fini>:
 8003304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003306:	bf00      	nop
 8003308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330a:	bc08      	pop	{r3}
 800330c:	469e      	mov	lr, r3
 800330e:	4770      	bx	lr
